# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openSolidworks(fileName="D:/sami's project/lower die.SLDPRT", topology=
    SOLID)
#* The file cannot be read. It may be corrupt or not a valid 
#* SolidWorks file.
mdb.openParasolid(fileName="D:/sami's project/lower die.x_t", topology=SOLID)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='lower die', scale=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['lower die'].Set(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['lower die'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['lower die'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='lower die-1', 
    part=mdb.models['Model-1'].parts['lower die'])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[18], MIDDLE), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[20], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[10], MIDDLE))
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[10], MIDDLE), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[34], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[37], CENTER))
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#3 ]', ), ), point1=mdb.models['Model-1'].parts['lower die'].vertices[0], 
    point2=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[13], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[17], MIDDLE))
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-3']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#7 ]', ), ), point1=mdb.models['Model-1'].parts['lower die'].vertices[0], 
    point2=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[32], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[13], MIDDLE))
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-3']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#7 ]', ), ), point1=mdb.models['Model-1'].parts['lower die'].vertices[0], 
    point2=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[17], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[13], MIDDLE))
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
del mdb.models['Model-1'].parts['lower die'].features['Datum plane-1']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=
    -38.0, principalPlane=XYPLANE)
mdb.models['Model-1'].parts['lower die'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['lower die'].datums[10])
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-4']
del mdb.models['Model-1'].parts['lower die'].features['Datum plane-1']
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#1f00000f #803018 ]', ), ), minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#1f00000f #803018 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].DatumPointByCoordinate(coords=(0.0, 
    0.0, 0.0))
del mdb.models['Model-1'].parts['lower die'].features['Datum pt-1']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[55], CENTER), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[44], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].vertices[17])
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[22], MIDDLE), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[47], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[25], MIDDLE))
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[45], 
    point=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[25], MIDDLE))
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[25], 
    point=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[36], MIDDLE))
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-4']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[25], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[22])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#8 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[9], MIDDLE), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[68], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[24], MIDDLE))
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#8000261 #8 ]', ), ), size=2.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#8000261 #8 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.01, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#8000261 #8 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#4 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[17], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[20])
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-5']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#10 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[15], 
    point=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[25], CENTER))
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=-2.0
    , principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=-4.0
    , principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=-6.0
    , principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=-8.0
    , principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=
    -10.0, principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#9 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['lower die'].datums[23])
mdb.models['Model-1'].parts['lower die'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#22 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['lower die'].datums[27])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#10 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].vertices[29], point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[23], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].vertices[11])
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-9']
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=-1.0
    , principalPlane=XZPLANE)
mdb.models['Model-1'].parts['lower die'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#14 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['lower die'].datums[31])
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#40 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#40 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#8 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#202 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#202 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteFeatures(('Partition cell-4', 
    'Partition cell-6', 'Partition cell-5', 'Datum plane-1', 'Datum plane-2', 
    'Datum plane-3', 'Datum plane-4', 'Datum plane-5', 'Partition cell-7', 
    'Partition cell-8', 'Datum plane-6', 'Partition cell-9'))
# Save by Amir on 2025_06_20-11.49.08; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['lower die'].setMeshControls(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-1'].parts['lower die'].deleteSeeds(regions=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#1f00000f #803018 ]', ), ))
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#11 ]', ), ), sizeGrowthRate=1.5, technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=HEX, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#11 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[28], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[26])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[0], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[26])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#40 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[62], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[31])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[0], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[36])
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#a ]', ), ), sizeGrowthRate=2.0, technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#a ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#a ]', ), ), sizeGrowthRate=1.05)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(allowMapped=False, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#a ]', ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#44cc1183 #19 #60800 ]', ), ), minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
# Save by Amir on 2025_06_20-11.58.29; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#61000 #40404c31 #600 ]', ), ), minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
# Save by Amir on 2025_06_20-12.00.21; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by Amir on 2025_06_20-12.01.35; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('lower die-1', ), 
    vector=(0.0, 0.0, 50.0))
# Save by Amir on 2025_06_20-14.17.13; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#44cc1183 #19 #60800 ]', ), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#61000 #40404c31 #600 ]', ), ), minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#61000 #40404c31 #600 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#115 ]', ), ), sizeGrowthRate=1.05)
mdb.models['Model-1'].parts['lower die'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#115 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#115 ]', ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=
    HEX_DOMINATED, regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#115 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=HEX, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#a ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#a ]', ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#8 ]', ), ), point1=mdb.models['Model-1'].parts['lower die'].vertices[16]
    , point2=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[75], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].vertices[12])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#4 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[13], MIDDLE), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[18], MIDDLE), point3=
    mdb.models['Model-1'].parts['lower die'].vertices[1])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#9 ]', ), ), point1=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[28], CENTER), point2=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[21], CENTER), point3=
    mdb.models['Model-1'].parts['lower die'].vertices[16])
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#90 ]', ), ), point1=mdb.models['Model-1'].parts['lower die'].vertices[3]
    , point2=mdb.models['Model-1'].parts['lower die'].vertices[17], point3=
    mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[58], CENTER))
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#ff ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#400 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[59], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[19])
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#4000 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[59]
    , point=mdb.models['Model-1'].parts['lower die'].vertices[16])
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#400 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[72], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[19])
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#400 ]', ), ), normal=mdb.models['Model-1'].parts['lower die'].edges[70], 
    point=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[48], MIDDLE))
#* Feature creation failed.
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-11']
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-10']
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-9']
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-8']
mdb.models['Model-1'].parts['lower die'].DatumPlaneByPrincipalPlane(offset=15.0
    , principalPlane=XYPLANE)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['lower die'].features['Datum plane-1'].setValues(
    offset=10.0)
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].features['Datum plane-1'].setValues(
    offset=0.0)
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].features['Datum plane-1'].setValues(
    offset=-50.0)
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].features['Datum plane-1'].setValues(
    offset=-35.0)
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].features['Datum plane-1'].setValues(
    offset=-33.0)
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].regenerate()
mdb.models['Model-1'].parts['lower die'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#110 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['lower die'].datums[75])
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#28 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#28 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#8110200 #85000d00 #6000080 ]', ), ), minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#8110200 #85000d00 #6000080 ]', ), ), size=3.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-8']
del mdb.models['Model-1'].parts['lower die'].features['Datum plane-1']
mdb.models['Model-1'].parts['lower die'].setMeshControls(allowMapped=True, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#a ]', ), ), sizeGrowthRate=1.25)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#115 ]', ), ), edge=mdb.models['Model-1'].parts['lower die'].edges[38], 
    point=mdb.models['Model-1'].parts['lower die'].InterestingPoint(
    mdb.models['Model-1'].parts['lower die'].edges[38], MIDDLE))
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-8']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#10 ]', ), ), edge=mdb.models['Model-1'].parts['lower die'].edges[37], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[21])
#* Feature creation failed.
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#10 ]', ), ), edge=mdb.models['Model-1'].parts['lower die'].edges[27], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[16])
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-8']
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#110 ]', ), ), edge=mdb.models['Model-1'].parts['lower die'].edges[27], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[16])
mdb.models['Model-1'].parts['lower die'].generateMesh()
del mdb.models['Model-1'].parts['lower die'].features['Partition cell-8']
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#350 ]', ), ), edge=mdb.models['Model-1'].parts['lower die'].edges[27], 
    point=mdb.models['Model-1'].parts['lower die'].vertices[16])
mdb.models['Model-1'].parts['lower die'].generateMesh()
# Save by Amir on 2025_06_20-14.46.16; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_20-14.46.30; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by Amir on 2025_06_20-14.46.48; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openParasolid(fileName="D:/sami's project/solid models/upper die.x_t", 
    topology=SOLID)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='upper die', scale=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='upper die-1', 
    part=mdb.models['Model-1'].parts['upper die'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('upper die-1', ), 
    vector=(0.0, 0.0, 50.0))
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[18], CENTER), point2=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[16], MIDDLE), point3=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[12], MIDDLE))
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[34], MIDDLE), point2=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[2], MIDDLE), point3=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[16], MIDDLE))
del mdb.models['Model-1'].parts['upper die'].features['Partition cell-2']
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[25], 
    point=mdb.models['Model-1'].parts['upper die'].vertices[18])
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#3 ]', ), ), point1=mdb.models['Model-1'].parts['upper die'].vertices[11]
    , point2=mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[47], CENTER), point3=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[46], CENTER))
del mdb.models['Model-1'].parts['upper die'].features['Partition cell-3']
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#7 ]', ), ), point1=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[1], MIDDLE), point2=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[47], CENTER), point3=
    mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[46], CENTER))
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#28 ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[39], 
    point=mdb.models['Model-1'].parts['upper die'].InterestingPoint(
    mdb.models['Model-1'].parts['upper die'].edges[51], CENTER))
del mdb.models['Model-1'].parts['upper die'].features['Partition cell-4']
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#a ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[53], 
    point=mdb.models['Model-1'].parts['upper die'].vertices[14])
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#82 ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[58], 
    point=mdb.models['Model-1'].parts['upper die'].vertices[34])
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#220 ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[67], 
    point=mdb.models['Model-1'].parts['upper die'].vertices[37])
mdb.models['Model-1'].parts['upper die'].PartitionCellByPlaneNormalToEdge(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#11 ]', ), ), edge=mdb.models['Model-1'].parts['upper die'].edges[67], 
    point=mdb.models['Model-1'].parts['upper die'].vertices[39])
mdb.models['Model-1'].parts['upper die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    ('[#220 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].parts['upper die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#220 ]', ), ), ))
mdb.models['Model-1'].parts['upper die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['upper die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['upper die'].edges.getSequenceFromMask((
    '[#38280000 #401801a3 #c2000000 #4 ]', ), ), minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=AS_IS, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#0 #33263408 #2000002a #18 ]', ), ), minSizeFactor=AS_IS, size=0.1)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=AS_IS, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#0 #33263408 #2000002a #18 ]', ), ), minSizeFactor=AS_IS, size=0.5)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].deleteMesh()
mdb.models['Model-1'].parts['upper die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['upper die'].edges.getSequenceFromMask((
    '[#38280000 #401801a3 #c2000000 #4 ]', ), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by Amir on 2025_06_20-15.09.44; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(53.75, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=12.0, 
    textPoint=(-105.337135314941, 10.3806648254395))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(6.25, 1.25))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], radius=10.7, 
    textPoint=(-50.5029945373535, -10.7567319869995))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='work-tube', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['work-tube'].BaseSolidExtrude(depth=120.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='inconel-718')
mdb.models['Model-1'].HomogeneousSolidSection(material='inconel-718', name=
    'work-tube', thickness=None)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='work-tube-1', 
    part=mdb.models['Model-1'].parts['work-tube'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('work-tube-1', ), 
    vector=(0.0, 0.0, -60.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 1.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('work-tube-1', ))
# Save by Amir on 2025_06_20-20.03.45; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['work-tube'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['work-tube'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['work-tube'].InterestingPoint(
    mdb.models['Model-1'].parts['work-tube'].edges[2], MIDDLE), point2=
    mdb.models['Model-1'].parts['work-tube'].InterestingPoint(
    mdb.models['Model-1'].parts['work-tube'].edges[0], CENTER), point3=
    mdb.models['Model-1'].parts['work-tube'].vertices[1])
mdb.models['Model-1'].parts['work-tube'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['work-tube'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by Amir on 2025_06_20-20.04.31; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_20-20.05.00; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openSolidworks(fileName=
    "D:/sami's project/solid models/axial plunge.SLDPRT", topology=SOLID)
#* The file cannot be read. It may be corrupt or not a valid 
#* SolidWorks file.
mdb.openParasolid(fileName="D:/sami's project/solid models/axial plunge.x_t", 
    topology=SOLID)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='axial plunge', scale=1.0, type=
    DEFORMABLE_BODY)
mdb.openParasolid(fileName="D:/sami's project/solid models/counter plunge.x_t", 
    topology=SOLID)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='counter plunge', scale=1.0, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='axial plunge-1'
    , part=mdb.models['Model-1'].parts['axial plunge'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('axial plunge-1', ), 
    vector=(60.0, 0.0, 0.0))
del mdb.models['Model-1'].rootAssembly.features['axial plunge-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='axial plunge-1'
    , part=mdb.models['Model-1'].parts['axial plunge'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 1.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('axial plunge-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('axial plunge-1', ), 
    vector=(20.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('axial plunge-1', ), 
    vector=(60.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='axial plunge-2'
    , part=mdb.models['Model-1'].parts['axial plunge'])
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.0, 1.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('axial plunge-2', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('axial plunge-2', ), 
    vector=(-80.0, 0.0, 0.0))
# Save by Amir on 2025_06_21-15.19.46; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'counter plunge-1', part=mdb.models['Model-1'].parts['counter plunge'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('counter plunge-1', 
    ), vector=(0.0, 0.0, 70.0))
# Save by Amir on 2025_06_21-15.21.08; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_21-15.21.11; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_21-15.25.42; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_21-15.25.43; build 2023 2022_09_28-21.41.55 183150
# Save by Amir on 2025_06_21-15.25.43; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['inconel-718'].Density(table=((8.2e-09, ), ))
mdb.models['Model-1'].materials['inconel-718'].Plastic(scaleStress=None, table=
    ((550.0, 0.0), (550.0, 0.3)))
# Save by Amir on 2025_06_21-20.59.01; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].materials['Material-1']
del mdb.models['Model-1'].materials['inconel-718']
mdb.models['Model-1'].Material(name='Inconel-718')
mdb.models['Model-1'].materials['Inconel-718'].Density(table=((8.2e-09, ), ))
mdb.models['Model-1'].materials['Inconel-718'].Elastic(table=((207000.0, 0.29), 
    ))
mdb.models['Model-1'].materials['Inconel-718'].Plastic(scaleStress=None, table=
    ((550.0, 0.0), (610.0, 0.01), (670.0, 0.02), (750.0, 0.05), (820.0, 0.1), (
    880.0, 0.15), (920.0, 0.2), (940.0, 0.25), (960.0, 0.3)))
mdb.models['Model-1'].HomogeneousSolidSection(material='Inconel-718', name=
    'Section-3', thickness=None)
del mdb.models['Model-1'].sections['Section-1']
del mdb.models['Model-1'].sections['Section-3']
del mdb.models['Model-1'].sections['work-tube']
mdb.models['Model-1'].HomogeneousSolidSection(material='Inconel-718', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['work-tube'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['work-tube'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['work-tube'].MaterialOrientation(
    additionalRotationType=ROTATION_NONE, axis=AXIS_1, fieldName='', localCsys=
    None, orientationType=GLOBAL, region=Region(
    cells=mdb.models['Model-1'].parts['work-tube'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )), stackDirection=STACK_3)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].edges[1], 
    CENTER))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].edges[1], 
    CENTER))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].vertices[38])
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].vertices[18])
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].edges[1], 
    CENTER))
mdb.models['Model-1'].RigidBody(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), name='Constraint-1', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[17], 
    )))
mdb.models['Model-1'].RigidBody(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), name='Constraint-2', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[20], 
    )))
mdb.models['Model-1'].RigidBody(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].cells.getSequenceFromMask(
    mask=('[#3954 ]', ), )), name='Constraint-3', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[18], 
    )))
mdb.models['Model-1'].RigidBody(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].cells.getSequenceFromMask(
    mask=('[#305b ]', ), )), name='Constraint-4', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[19], 
    )))
mdb.models['Model-1'].ExplicitDynamicsStep(improvedDtMethod=ON, name='Step-1', 
    previous='Initial', timePeriod=1.3)
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.5, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), mechanicalConstraint=KINEMATIC, name='Int-1', 
    secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#1ef ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), mechanicalConstraint=KINEMATIC, name='Int-2', 
    secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#104 ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), mechanicalConstraint=KINEMATIC, name='Int-3', 
    secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#210 ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    mask=('[#33943714 #ffdf9bf8 #7f ]', ), )), mechanicalConstraint=KINEMATIC, 
    name='Int-4', secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    mask=('[#8ce356f0 #fff9dfc3 #f ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    mask=('[#8410000 #610002 #f ]', ), )), mechanicalConstraint=KINEMATIC, 
    name='Int-5', secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#3fc ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    mask=('[#40400 #18410c0 #78 ]', ), )), mechanicalConstraint=KINEMATIC, 
    name='Int-6', secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#3fc ]', ), )), sliding=FINITE)
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[16], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'Constraint-5', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    mask=('[#19 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[17], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'Constraint-6', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    mask=('[#19 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[20], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'Constraint-7', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    mask=('[#19 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[18], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'Constraint-8', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    mask=('[#33943714 #ffdf9bf8 #7f ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, 
    ur2=ON, ur3=ON)
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[19], )), couplingType=
    KINEMATIC, influenceRadius=WHOLE_SURFACE, localCsys=None, name=
    'Constraint-9', surface=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    mask=('[#8ce356f0 #fff9dfc3 #f ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=
    ON, ur3=ON)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[16], )), u1=UNSET, u2=
    0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[20], )), u1=UNSET, u2=
    0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[17], )), u1=0.0, u2=0.0, 
    u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-4', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[18], 
    mdb.models['Model-1'].rootAssembly.referencePoints[19], )))
mdb.models['Model-1'].boundaryConditions['BC-2'].move('Step-1', 'Initial')
mdb.models['Model-1'].boundaryConditions['BC-3'].move('Step-1', 'Initial')
mdb.models['Model-1'].boundaryConditions['BC-1'].move('Step-1', 'Initial')
mdb.models['Model-1'].Velocity(distributionType=MAGNITUDE, field='', name=
    'Predefined Field-1', omega=0.0, region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[20], )), velocity1=2.0, 
    velocity2=0.0, velocity3=0.0)
mdb.models['Model-1'].Velocity(distributionType=MAGNITUDE, field='', name=
    'Predefined Field-2', omega=0.0, region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[16], )), velocity1=-2.0, 
    velocity2=0.0, velocity3=0.0)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-5', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#3ff ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].edges.getSequenceFromMask(
    mask=('[#3fffd ]', ), ), 
    vertices=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].vertices.getSequenceFromMask(
    mask=('[#3f9 ]', ), ), referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[17], 
    mdb.models['Model-1'].rootAssembly.referencePoints[18], 
    mdb.models['Model-1'].rootAssembly.referencePoints[20], )), u1=UNSET, u2=
    SET, u3=UNSET, ur1=SET, ur2=SET, ur3=SET)
mdb.models['Model-1'].parts['axial plunge'].setMeshControls(regions=
    mdb.models['Model-1'].parts['axial plunge'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['axial plunge'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.4)
mdb.models['Model-1'].parts['axial plunge'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['axial plunge'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['axial plunge'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['axial plunge'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['axial plunge'].generateMesh()
mdb.models['Model-1'].parts['counter plunge'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['Model-1'].parts['counter plunge'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['counter plunge'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['counter plunge'].setElementType(elemTypes=(
    ElemType(elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['counter plunge'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['counter plunge'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['lower die'].setMeshControls(algorithm=
    ADVANCING_FRONT, elemShape=HEX_DOMINATED, regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#3fff ]', ), ), sizeGrowthRate=1.05, technique=SWEEP)
#* Error: Some regions cannot be Swept/Revolved
mdb.models['Model-1'].parts['lower die'].deleteSeeds(regions=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#ffffffff:3 #1f ]', ), ))
mdb.models['Model-1'].parts['lower die'].deleteSeeds()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=20.0)
mdb.models['Model-1'].parts['lower die'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#ffffffff:3 #1f ]', ), ), number=2)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].deleteMesh()
mdb.models['Model-1'].parts['upper die'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['upper die'].edges.getSequenceFromMask((
    '[#ffffffff:2 #dffffffb #7ff ]', ), ), number=2)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=6, numDomains=6, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Density(table=((7.85e-09, ), ))
mdb.models['Model-1'].materials['Steel'].Elastic(table=((200000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name=
    'Section-2', thickness=None)
mdb.models['Model-1'].parts['axial plunge'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['axial plunge'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-2', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['counter plunge'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['counter plunge'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-2', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['upper die'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    mask=('[#3fff ]', ), )), sectionName='Section-2', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['lower die'].sectionAssignments[0].setValues(
    sectionName='Section-2')
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MODIFIED TETRAHEDRAL ELEMENTS ARE INCOMPATIBLE WITH THE REGULAR TETRAHEDRAL ELEMENTS IF THEY SHARE THE SAME NODES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '47 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY__PICKEDSURF39 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['Int-1'].move('Step-1', 'Initial')
mdb.models['Model-1'].interactions['Int-2'].move('Step-1', 'Initial')
mdb.models['Model-1'].interactions['Int-3'].move('Step-1', 'Initial')
mdb.models['Model-1'].interactions['Int-4'].move('Step-1', 'Initial')
mdb.models['Model-1'].interactions['Int-5'].move('Step-1', 'Initial')
mdb.models['Model-1'].interactions['Int-6'].move('Step-1', 'Initial')
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MODIFIED TETRAHEDRAL ELEMENTS ARE INCOMPATIBLE WITH THE REGULAR TETRAHEDRAL ELEMENTS IF THEY SHARE THE SAME NODES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '47 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY__PICKEDSURF39 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['Int-2'].suppress()
mdb.models['Model-1'].interactions['Int-3'].suppress()
mdb.models['Model-1'].interactions['Int-4'].suppress()
mdb.models['Model-1'].interactions['Int-5'].suppress()
mdb.models['Model-1'].interactions['Int-6'].suppress()
mdb.models['Model-1'].interactions['Int-1'].suppress()
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#220020 #2000000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#3000 #8008000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#84004000 #1000000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#900000 #10100000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-3-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#0 #8000000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-3-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#0 #10 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#8410000 #610002 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-work-tube-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#48 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#50 #10800500 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#8410000 #610002 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#1400 #4080880 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#8410000 #610002 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-lower die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#8410000 #610002 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#800000 #80005201 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#40400 #18410c0 #78 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#48 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#20000000 #80410000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#40400 #18410c0 #78 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#40400 #18410c0 #78 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#10000000 #24080000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#2000114 #100 #4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#40400 #18410c0 #78 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#104 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#a0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#210 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#a0 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-lower die-1'], name=
    'CP-1-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-lower die-1'], name=
    'CP-2-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-3-lower die-1'], name=
    'CP-3-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-3-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-lower die-1'], name=
    'CP-4-lower die-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-lower die-1'], name=
    'CP-5-lower die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-lower die-1'], name=
    'CP-6-lower die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-lower die-1'], name=
    'CP-7-lower die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-lower die-1'], name=
    'CP-8-lower die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-lower die-1'], name=
    'CP-9-lower die-1-counter plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-counter plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-lower die-1'], name=
    'CP-10-lower die-1-counter plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-counter plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-upper die-1'], name=
    'CP-11-upper die-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-upper die-1'], name=
    'CP-12-upper die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-upper die-1'], name=
    'CP-13-upper die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-upper die-1'], name=
    'CP-14-upper die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-upper die-1'], name=
    'CP-15-upper die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-upper die-1'], name=
    'CP-16-upper die-1-counter plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-counter plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-upper die-1'], name=
    'CP-17-upper die-1-counter plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-counter plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-axial plunge-1'], name=
    'CP-18-axial plunge-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-axial plunge-1'], name=
    'CP-19-axial plunge-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-axial plunge-2'], name=
    'CP-20-axial plunge-2-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-axial plunge-2'], name=
    'CP-21-axial plunge-2-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-work-tube-1'], sliding=
    FINITE)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MODIFIED TETRAHEDRAL ELEMENTS ARE INCOMPATIBLE WITH THE REGULAR TETRAHEDRAL ELEMENTS IF THEY SHARE THE SAME NODES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '47 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-11-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-13-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-14-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-17-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-1'].suppress()
mdb.models['Model-1'].constraints['Constraint-1'].resume()
mdb.models['Model-1'].constraints['Constraint-1'].suppress()
mdb.models['Model-1'].constraints['Constraint-2'].suppress()
mdb.models['Model-1'].constraints['Constraint-3'].suppress()
mdb.models['Model-1'].constraints['Constraint-4'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MODIFIED TETRAHEDRAL ELEMENTS ARE INCOMPATIBLE WITH THE REGULAR TETRAHEDRAL ELEMENTS IF THEY SHARE THE SAME NODES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '47 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-11-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-13-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-14-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_CP-17-upper die-1 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-3-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-4-lower die-1-work-tube-1'].suppress()
mdb.models['Model-1'].interactions['CP-4-lower die-1-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-3-lower die-1-upper die-1'].resume()
mdb.models['Model-1'].interactions['CP-4-lower die-1-work-tube-1'].suppress()
mdb.models['Model-1'].interactions['CP-3-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-5-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-7-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-7-lower die-1-axial plunge-2'].resume()
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-7-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-8-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-9-lower die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-10-lower die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-11-upper die-1-work-tube-1'].suppress()
mdb.models['Model-1'].interactions['CP-12-upper die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-13-upper die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-14-upper die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-16-upper die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-15-upper die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-17-upper die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-18-axial plunge-1-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-19-axial plunge-1-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-20-axial plunge-2-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-21-axial plunge-2-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['Int-1'].resume()
mdb.models['Model-1'].interactions['Int-2'].resume()
mdb.models['Model-1'].interactions['Int-3'].resume()
mdb.models['Model-1'].interactions['Int-4'].resume()
mdb.models['Model-1'].interactions['Int-5'].resume()
mdb.models['Model-1'].interactions['Int-6'].resume()
mdb.models['Model-1'].interactions['CP-2-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-1-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].constraints['Constraint-1'].resume()
mdb.models['Model-1'].constraints['Constraint-2'].resume()
mdb.models['Model-1'].constraints['Constraint-3'].resume()
mdb.models['Model-1'].constraints['Constraint-4'].resume()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#804 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.29, name='__profile__', 
    sheetSize=251.74, transform=
    mdb.models['Model-1'].parts['lower die'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['lower die'].faces[59], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['lower die'].edges[92], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, -81.0)))
mdb.models['Model-1'].parts['lower die'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 60.0), point2=
    (19.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].parts['lower die'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['lower die'].faces.getSequenceFromMask((
    '[#0 #8000000 ]', ), ), sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['lower die'].edges[92])
#* Feature creation failed.
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, -60.0), 
    point2=(-19.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-19.0, -60.0), 
    point2=(-19.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[38])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[38])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-19.0, 60.0), 
    point2=(19.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[39])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[39])
mdb.models['Model-1'].parts['lower die'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['lower die'].faces.getSequenceFromMask((
    '[#0 #8000000 ]', ), ), sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['lower die'].edges[92])
#* Feature creation failed.
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.29, name='__profile__', 
    sheetSize=251.74, transform=
    mdb.models['Model-1'].parts['lower die'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['lower die'].faces[59], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['lower die'].edges[92], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, -81.0)))
mdb.models['Model-1'].parts['lower die'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 60.0), point2=
    (-19.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-19.0, 60.0), 
    point2=(-19.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-19.0, -60.0), 
    point2=(19.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[38])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[38])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, -60.0), 
    point2=(19.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[39])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[39])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(31.45, 59.755), 
    point2=(31.45, -59.7549999999441))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[40])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(31.45, 
    -59.7549999999441), point2=(19.0, -60.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.29, name='__profile__', 
    sheetSize=251.74, transform=
    mdb.models['Model-1'].parts['lower die'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['lower die'].faces[59], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['lower die'].edges[92], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, -81.0)))
mdb.models['Model-1'].parts['lower die'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 60.0), point2=
    (31.45, 60.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(31.45, 60.0), 
    point2=(31.45, -59.7549999999441))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[37])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(31.45, 
    -59.7549999999441), point2=(19.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, -60.0), 
    point2=(19.0, 60.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[39])
mdb.models['Model-1'].parts['lower die'].PartitionFaceBySketchThruAll(faces=
    mdb.models['Model-1'].parts['lower die'].faces.getSequenceFromMask((
    '[#0 #400000 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__']
    , sketchPlane=mdb.models['Model-1'].parts['lower die'].faces[59], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['lower die'].edges[92])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#1000 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1000 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#280 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#280 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].generateMesh(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1f84 ]', ), ))
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['lower die'].generateMesh(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1f80 ]', ), ))
mdb.models['Model-1'].parts['lower die'].Set(elements=
    mdb.models['Model-1'].parts['lower die'].elements.getSequenceFromMask(
    mask=('[#0:8 #20 #0:3 #80000 ]', ), ), name='PoorElements-1')
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].deleteMesh(regions=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#3fff ]', ), ))
mdb.models['Model-1'].parts['upper die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['upper die'].edges.getSequenceFromMask((
    '[#ffffffff:3 #7ff ]', ), ), size=6.0)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh(regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#3fff ]', ), ))
mdb.models['Model-1'].parts['lower die'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['lower die'].edges.getSequenceFromMask((
    '[#ffffffff:3 #7f ]', ), ), size=12.0)
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MODIFIED TETRAHEDRAL ELEMENTS ARE INCOMPATIBLE WITH THE REGULAR TETRAHEDRAL ELEMENTS IF THEY SHARE THE SAME NODES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The secondary surface ASSEMBLY__T10_lower die-1_S and the main surface ASSEMBLY__T10_lower die-1_M referenced by *TIE definition ASSEMBLY__T10_lower die-1 are part of the same rigid body definition.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The secondary surface ASSEMBLY__T10_lower die-1_SN and the main surface ASSEMBLY__T10_lower die-1_M referenced by *TIE definition ASSEMBLY__T10_lower die-1-Nodes are part of the same rigid body definition.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '197 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The volume of 2 elements is zero, small, or negative. Check coordinates or node numbering, or modify the mesh seed. In the case of a tetrahedron this error may indicate that all nodes are located very nearly in a plane. The elements have been identified in element set ErrElemVolSmallNegZero.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE FROM ELEMENT TYPE C3D10 CANNOT BE USED WITH CONTACT PAIR IN ABAQUS/EXPLICIT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D8R IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D10 IS INCOMPATIBLE WITH OTHER ELEMENT TYPES IN THIS SURFACE DEFINITION. THIS SURFACE CANNOT BE USED WITH *CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY__PICKEDSURF39 BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE CANNOT BE USED WITH *CONTACT PAIR. CHECK PREVIOUS WARNING MESSAGES FOR THIS SURFACE TO FIND THE CAUSE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['upper die'].deleteMesh(regions=
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#220 ]', ), ))
mdb.models['Model-1'].parts['upper die'].setMeshControls(elemShape=HEX, 
    regions=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    ('[#3fff ]', ), ), sizeGrowthRate=1.25, technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].setMeshControls(elemShape=WEDGE, 
    regions=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    ('[#220 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    ('[#220 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=EXPLICIT), ElemType(elemCode=C3D6, 
    elemLibrary=EXPLICIT), ElemType(elemCode=C3D4, elemLibrary=EXPLICIT)), 
    regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1000 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].setMeshControls(algorithm=
    ADVANCING_FRONT, elemShape=HEX, regions=
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1000 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['lower die'].deleteFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4', 
    'Partition cell-5', 'Partition cell-6', 'Partition cell-7', 
    'Partition cell-8'))
#* FeatureError: Regeneration failed
mdb.models['Model-1'].parts['lower die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].parts['lower die'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['lower die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['lower die'].generateMesh()
del mdb.models['Model-1'].parts['lower die'].features['Partition face-1']
mdb.models['Model-1'].parts['upper die'].deleteFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4', 
    'Partition cell-5', 'Partition cell-6', 'Partition cell-7'))
mdb.models['Model-1'].parts['upper die'].setMeshControls(elemShape=TET, 
    regions=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), sizeGrowthRate=1.25, technique=FREE)
mdb.models['Model-1'].parts['upper die'].setElementType(elemTypes=(ElemType(
    elemCode=UNKNOWN_HEX, elemLibrary=EXPLICIT), ElemType(
    elemCode=UNKNOWN_WEDGE, elemLibrary=EXPLICIT), ElemType(elemCode=C3D10M, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *RIGIDBODY, file "Job-1.inp", line 211516: Unknown assembly set _PICKEDSET25', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *RIGIDBODY, file "Job-1.inp", line 211516: Unknown assembly set _PICKEDSET26', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *RIGIDBODY, file "Job-1.inp", line 211518: Unknown assembly set _PICKEDSET27', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *RIGIDBODY, file "Job-1.inp", line 211518: Unknown assembly set _PICKEDSET28', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *COUPLING, file "Job-1.inp", line 211529: Unknown assembly set _PICKEDSET48', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *COUPLING, file "Job-1.inp", line 211532: Unknown assembly set _PICKEDSET50', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "Job-1.inp", line 211591: Unknown assembly node set _PICKEDSET54', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET25 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET25. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET27 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET27. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET25 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET25. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET27 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET27. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET25 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET25. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET27 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET27. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET25 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET25. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET27 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET27. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET25 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET25. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET27 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET27. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*RIGID BODY REFERENCE NODE IS 0.', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET48 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET48. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REFERENCE NODE 0 ON THE *COUPLING OPTION IS NOT DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET50 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET50. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REFERENCE NODE 0 ON THE *COUPLING OPTION IS NOT DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET48 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET48. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REFERENCE NODE 0 ON THE *COUPLING OPTION IS NOT DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET50 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNABLE TO LOCATE NODE SET ASSEMBLY__PICKEDSET50. THE NODE SET MUST HAVE BEEN PREVIOUSLY DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REFERENCE NODE 0 ON THE *COUPLING OPTION IS NOT DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET48 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '32 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STATUS IS NOT AVAILABLE FOR ELEMENT TYPE C3D10M', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STATUS IS NOT AVAILABLE FOR ELEMENT TYPE C3D10M', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-3'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-3'].resume()
mdb.models['Model-1'].interactions['Int-6'].suppress()
mdb.models['Model-1'].interactions['Int-5'].suppress()
mdb.models['Model-1'].interactions['Int-4'].suppress()
mdb.models['Model-1'].interactions['Int-2'].suppress()
mdb.models['Model-1'].interactions['Int-3'].suppress()
mdb.models['Model-1'].interactions['Int-1'].suppress()
mdb.models['Model-1'].interactions['CP-21-axial plunge-2-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-20-axial plunge-2-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-19-axial plunge-1-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-18-axial plunge-1-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-17-upper die-1-counter plunge-1'].resume(
    )
mdb.models['Model-1'].interactions['CP-16-upper die-1-counter plunge-1'].resume(
    )
mdb.models['Model-1'].interactions['CP-15-upper die-1-axial plunge-2'].resume()
mdb.models['Model-1'].interactions['CP-14-upper die-1-axial plunge-2'].resume()
mdb.models['Model-1'].interactions['CP-13-upper die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-12-upper die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-11-upper die-1-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-10-lower die-1-counter plunge-1'].resume(
    )
mdb.models['Model-1'].interactions['CP-9-lower die-1-counter plunge-1'].resume(
    )
mdb.models['Model-1'].interactions['CP-8-lower die-1-axial plunge-2'].resume()
mdb.models['Model-1'].interactions['CP-7-lower die-1-axial plunge-2'].resume()
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-5-lower die-1-axial plunge-1'].resume()
mdb.models['Model-1'].interactions['CP-4-lower die-1-work-tube-1'].resume()
mdb.models['Model-1'].interactions['CP-3-lower die-1-upper die-1'].resume()
mdb.models['Model-1'].interactions['CP-2-lower die-1-upper die-1'].resume()
mdb.models['Model-1'].interactions['CP-1-lower die-1-upper die-1'].resume()
del mdb.models['Model-1'].interactions['CP-21-axial plunge-2-work-tube-1']
del mdb.models['Model-1'].interactions['CP-20-axial plunge-2-work-tube-1']
del mdb.models['Model-1'].interactions['CP-19-axial plunge-1-work-tube-1']
mdb.models['Model-1'].interactions['CP-18-axial plunge-1-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-17-upper die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-16-upper die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-15-upper die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-14-upper die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-13-upper die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-12-upper die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-11-upper die-1-work-tube-1'].suppress()
mdb.models['Model-1'].interactions['CP-10-lower die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-9-lower die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-8-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-7-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-6-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-5-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-4-lower die-1-work-tube-1'].suppress()
mdb.models['Model-1'].interactions['CP-3-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-2-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-1-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-upper die-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-work-tube-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#48 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#80 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-lower die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#48 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-22-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-23-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#80 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-counter plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['counter plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-24-upper die-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    ('[#f00 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-22-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#104 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-22-axial plunge-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-23-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#a0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-23-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-24-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#210 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-24-axial plunge-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-25-work-tube-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    ('[#a0 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-lower die-1'], name=
    'CP-4-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-lower die-1'], name=
    'CP-5-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-lower die-1'], name=
    'CP-6-lower die-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-lower die-1'], name=
    'CP-7-lower die-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-axial plunge-1'], name=
    'CP-8-axial plunge-1-lower die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-lower die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-lower die-1'], name=
    'CP-9-lower die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-axial plunge-2'], name=
    'CP-10-axial plunge-2-lower die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-lower die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-lower die-1'], name=
    'CP-11-lower die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-counter plunge-1'], 
    name='CP-12-counter plunge-1-lower die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-lower die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-lower die-1'], name=
    'CP-13-lower die-1-counter plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-counter plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-upper die-1'], name=
    'CP-14-upper die-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-upper die-1'], name=
    'CP-15-upper die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-upper die-1'], name=
    'CP-16-upper die-1-axial plunge-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-axial plunge-1'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-upper die-1'], name=
    'CP-17-upper die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-22-upper die-1'], name=
    'CP-18-upper die-1-axial plunge-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-axial plunge-2'], 
    sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-counter plunge-1'], 
    name='CP-19-counter plunge-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-23-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-counter plunge-1'], 
    name='CP-20-counter plunge-1-upper die-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-24-upper die-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-axial plunge-1'], name=
    'CP-21-axial plunge-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-22-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-22-axial plunge-1'], name=
    'CP-22-axial plunge-1-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-23-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-23-axial plunge-2'], name=
    'CP-23-axial plunge-2-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-24-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(contactControls='', 
    createStepName='Initial', interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-24-axial plunge-2'], name=
    'CP-24-axial plunge-2-work-tube-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-25-work-tube-1'], sliding=
    FINITE)
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 50.0, 0.0))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, -50.0, 0.0))
mdb.models['Model-1'].constraints['Constraint-3'].setValues(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[142], )))
mdb.models['Model-1'].constraints['Constraint-4'].setValues(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[143], )))
mdb.models['Model-1'].constraints['Constraint-9'].setValues(alpha=0.0, 
    controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[143], )), surface=
    Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['lower die-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), )))
mdb.models['Model-1'].constraints['Constraint-8'].setValues(alpha=0.0, 
    controlPoint=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[142], )), surface=
    Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['upper die-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), )))
mdb.models['Model-1'].boundaryConditions['BC-4'].setValues(region=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[142], 
    )))
mdb.models['Model-1'].boundaryConditions['BC-4'].setValues(region=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[142], 
    mdb.models['Model-1'].rootAssembly.referencePoints[143], )))
mdb.models['Model-1'].parts['upper die'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['upper die'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-2', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '46 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 2900, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 51547 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-11-lower die-1 and ASSEMBLY_CP-4-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-12-lower die-1 and ASSEMBLY_CP-5-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-13-lower die-1 and ASSEMBLY_CP-6-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-10-axial plunge-2 and ASSEMBLY_CP-17-lower die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-lower die-1 and ASSEMBLY_CP-11-axial plunge-2 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-12-counter plunge-1 and ASSEMBLY_CP-19-lower die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-lower die-1 and ASSEMBLY_CP-13-counter plunge-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-21-upper die-1 and ASSEMBLY_CP-17-axial plunge-2 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-22-upper die-1 and ASSEMBLY_CP-18-axial plunge-2 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-counter plunge-1 and ASSEMBLY_CP-23-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-counter plunge-1 and ASSEMBLY_CP-24-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-10-axial plunge-2-lower die-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-11-lower die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-12-counter plunge-1-lower die-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-13-lower die-1-counter plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-18-upper die-1-axial plunge-2'].suppress(
    )
mdb.models['Model-1'].interactions['CP-19-counter plunge-1-upper die-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-20-counter plunge-1-upper die-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-21-axial plunge-1-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-22-axial plunge-1-work-tube-1'].suppress(
    )
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '46 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 11904, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 51547 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-11-lower die-1 and ASSEMBLY_CP-4-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-12-lower die-1 and ASSEMBLY_CP-5-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-13-lower die-1 and ASSEMBLY_CP-6-upper die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-21-upper die-1 and ASSEMBLY_CP-17-axial plunge-2 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-4-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-5-lower die-1-upper die-1'].suppress()
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-6-lower die-1-upper die-1'].suppress()
mdb.models['Model-1'].interactions['CP-17-upper die-1-axial plunge-2'].suppress(
    )
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '46 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 9344, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 51547 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 646 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 1108, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 6.0145922020638e-08, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000196939974557608, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000196939974557608, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The elements contained in element set ErrElemExcessDistortion-Step1 have distorted excessively.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'There is only one excessively distorted element', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The elements contained in element set ErrElemExcessDistortion-Step1 have distorted excessively.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.000898544327355921, 
    'stableTimeIncrement': 9.9999998245167e-15, 'internalEnergy': 25034684.0, 
    'stepTime': 0.000898544327355921, 'totalEnergy': 45267640.0, 
    'jobName': 'Job-1', 'artificialEnergy': 905834.625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 9779, 
    'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 17903348.0, 'wallTime': 157.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].materials['Inconel-718'].plastic.setValues(scaleStress=
    None)
mdb.models['Model-1'].materials['Inconel-718'].plastic.RateDependent(table=((
    965.0, -0.12), ))
mdb.models['Model-1'].parts['lower die'].deleteMesh()
mdb.models['Model-1'].parts['lower die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['Model-1'].parts['lower die'].generateMesh()
mdb.models['Model-1'].parts['upper die'].deleteMesh()
mdb.models['Model-1'].parts['upper die'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['Model-1'].parts['upper die'].generateMesh()
mdb.models['Model-1'].parts['work-tube'].deleteMesh()
mdb.models['Model-1'].parts['work-tube'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['work-tube'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POWER LAW EXPONENT n FOR THE *RATE DEPENDENT OPTION MUST BE GREATER THAN ZERO.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].materials['Inconel-718'].plastic.setValues(scaleStress=
    None)
mdb.models['Model-1'].materials['Inconel-718'].plastic.rateDependent.setValues(
    table=((965.0, 0.12), ))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 18740, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 6960, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 6.01352425633195e-08, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000196940003661439, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000196940003661439, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.000739508774131536, 
    'stableTimeIncrement': 9.9999998245167e-15, 'internalEnergy': 28116410.0, 
    'stepTime': 0.000739508774131536, 'totalEnergy': 44624468.0, 
    'jobName': 'Job-1', 'artificialEnergy': 909949.1875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 8122, 
    'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 15219852.0, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].predefinedFields['Predefined Field-2'].suppress()
mdb.models['Model-1'].predefinedFields['Predefined Field-1'].suppress()
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-6', 
    region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[20], )), v1=2.0, v2=
    UNSET, v3=UNSET, vr1=UNSET, vr2=UNSET, vr3=UNSET)
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-7', 
    region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[16], )), v1=UNSET, v2=
    -2.0, v3=UNSET, vr1=UNSET, vr2=UNSET, vr3=UNSET)
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-2.0, v2=UNSET)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 1484, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 16100, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 6.01352425633195e-08, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000223810086026788, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000223810086026788, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].materials['Inconel-718'].plastic.rateDependent
mdb.models['Model-1'].materials['Inconel-718'].plastic.setValues(scaleStress=
    None)
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=0.1)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 9492, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-15-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-8-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-9-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-15-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-16-axial plunge-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 328, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 6.01352425633195e-08, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000223810086026788, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000223810086026788, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500001199543476, 
    'stableTimeIncrement': 9.94331657011571e-08, 
    'internalEnergy': 268.162170410156, 'stepTime': 0.00500001199543476, 
    'totalEnergy': 257.327178955078, 'jobName': 'Job-1', 
    'artificialEnergy': 5.97826099395752, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 50256, 'distortionContrEnergy': 0.0, 
    'externalWork': 12.3386373519897, 'kineticEnergy': 0.000559946172870696, 
    'wallTime': 170.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100000752136111, 
    'stableTimeIncrement': 9.93558160189423e-08, 
    'internalEnergy': 1071.14111328125, 'stepTime': 0.0100000752136111, 
    'totalEnergy': 1033.13012695312, 'jobName': 'Job-1', 
    'artificialEnergy': 19.1881713867188, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 100520, 'distortionContrEnergy': 0.0, 
    'externalWork': 45.6243362426758, 'kineticEnergy': 0.000458018883364275, 
    'wallTime': 340.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000900030136, 
    'stableTimeIncrement': 9.92788002918132e-08, 'internalEnergy': 2409.09375, 
    'stepTime': 0.0150000900030136, 'totalEnergy': 2325.60009765625, 
    'jobName': 'Job-1', 'artificialEnergy': 41.1580352783203, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 150695, 
    'distortionContrEnergy': 0.0, 'externalWork': 99.4729766845703, 
    'kineticEnergy': 0.000450646009994671, 'wallTime': 513.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.020000085234642, 
    'stableTimeIncrement': 9.92013013956239e-08, 
    'internalEnergy': 4300.7177734375, 'stepTime': 0.020000085234642, 
    'totalEnergy': 4153.11572265625, 'jobName': 'Job-1', 
    'artificialEnergy': 71.8359222412109, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 201284, 'distortionContrEnergy': 0.0, 
    'externalWork': 174.544860839844, 'kineticEnergy': 0.000442777381977066, 
    'wallTime': 688.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].RigidBody(bodyRegion=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), name='Constraint-10', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[16], 
    )))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 14900, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-8-axial plunge-1 and ASSEMBLY_CP-15-lower die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-16-lower die-1 and ASSEMBLY_CP-9-axial plunge-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-19-upper die-1 and ASSEMBLY_CP-15-axial plunge-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-20-upper die-1 and ASSEMBLY_CP-16-axial plunge-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-9-lower die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-15-upper die-1-axial plunge-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-16-upper die-1-axial plunge-1'].suppress(
    )
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 18676, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-8-axial plunge-1 and ASSEMBLY_CP-15-lower die-1 are rigid surfaces. Kinematic contact  between two rigid surfaces is not allowed.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': PACKAGER_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Packager exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-8-axial plunge-1-lower die-1'].suppress(
    )
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 17108, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 2900, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.03282978614061e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000393879949115217, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000393879949115217, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500005623325706, 
    'stableTimeIncrement': 1.21141894737775e-07, 
    'internalEnergy': 2374.70581054688, 'stepTime': 0.00500005623325706, 
    'totalEnergy': 867.0654296875, 'jobName': 'Job-1', 
    'artificialEnergy': 1023.5537109375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 39953, 'distortionContrEnergy': 0.0, 
    'externalWork': 16.0983715057373, 'kineticEnergy': 36.8759498596191, 
    'wallTime': 59.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.010000086389482, 
    'stableTimeIncrement': 1.20830407013273e-07, 'internalEnergy': 4732.890625, 
    'stepTime': 0.010000086389482, 'totalEnergy': 1811.00476074219, 
    'jobName': 'Job-1', 'artificialEnergy': 2078.56640625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 81270, 
    'distortionContrEnergy': 0.0, 'externalWork': 54.5951499938965, 
    'kineticEnergy': 0.0315772406756878, 'wallTime': 121.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000406429172, 
    'stableTimeIncrement': 1.2089516587821e-07, 
    'internalEnergy': 6700.9697265625, 'stepTime': 0.0150000406429172, 
    'totalEnergy': 2761.25463867188, 'jobName': 'Job-1', 
    'artificialEnergy': 2498.8505859375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 122570, 'distortionContrEnergy': 0.0, 
    'externalWork': 110.421806335449, 'kineticEnergy': 0.0425978899002075, 
    'wallTime': 185.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.020000085234642, 
    'stableTimeIncrement': 1.21053616908284e-07, 
    'internalEnergy': 7468.9169921875, 'stepTime': 0.020000085234642, 
    'totalEnergy': 3081.48583984375, 'jobName': 'Job-1', 
    'artificialEnergy': 2866.177734375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 163869, 'distortionContrEnergy': 0.0, 
    'externalWork': 176.828689575195, 'kineticEnergy': 0.0265116225928068, 
    'wallTime': 252.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250000208616257, 
    'stableTimeIncrement': 1.21074947401212e-07, 
    'internalEnergy': 7703.61767578125, 'stepTime': 0.0250000208616257, 
    'totalEnergy': 3166.994140625, 'jobName': 'Job-1', 
    'artificialEnergy': 2909.1943359375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 205166, 'distortionContrEnergy': 0.0, 
    'externalWork': 266.193542480469, 'kineticEnergy': 0.157838776707649, 
    'wallTime': 315.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000496208668, 
    'stableTimeIncrement': 1.21064232416757e-07, 
    'internalEnergy': 7834.09521484375, 'stepTime': 0.0300000496208668, 
    'totalEnergy': 3200.03979492188, 'jobName': 'Job-1', 
    'artificialEnergy': 2923.16284179688, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 246464, 'distortionContrEnergy': 0.0, 
    'externalWork': 374.434844970703, 'kineticEnergy': 0.000446143967565149, 
    'wallTime': 377.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000821053982, 
    'stableTimeIncrement': 1.21065284020005e-07, 
    'internalEnergy': 7980.50146484375, 'stepTime': 0.0350000821053982, 
    'totalEnergy': 3231.29296875, 'jobName': 'Job-1', 
    'artificialEnergy': 2941.16430664062, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 288246, 'distortionContrEnergy': 0.0, 
    'externalWork': 501.119110107422, 'kineticEnergy': 0.000444716599304229, 
    'wallTime': 441.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0400000773370266, 
    'stableTimeIncrement': 1.21063351343764e-07, 
    'internalEnergy': 8149.9755859375, 'stepTime': 0.0400000773370266, 
    'totalEnergy': 3267.48046875, 'jobName': 'Job-1', 
    'artificialEnergy': 2961.3623046875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 330189, 'distortionContrEnergy': 0.0, 
    'externalWork': 646.562072753906, 'kineticEnergy': 0.000455090659670532, 
    'wallTime': 505.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.045000072568655, 
    'stableTimeIncrement': 1.21064658742398e-07, 
    'internalEnergy': 8350.40234375, 'stepTime': 0.045000072568655, 
    'totalEnergy': 3315.88745117188, 'jobName': 'Job-1', 
    'artificialEnergy': 2994.97412109375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 372132, 'distortionContrEnergy': 0.0, 
    'externalWork': 805.817993164062, 'kineticEnergy': 0.000456728681456298, 
    'wallTime': 569.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0500001013278961, 
    'stableTimeIncrement': 1.20854949159366e-07, 
    'internalEnergy': 9762.2001953125, 'stepTime': 0.0500001013278961, 
    'totalEnergy': 3983.80200195312, 'jobName': 'Job-1', 
    'artificialEnergy': 3415.76318359375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 413913, 'distortionContrEnergy': 0.0, 
    'externalWork': 974.60400390625, 'kineticEnergy': 49.5456237792969, 
    'wallTime': 634.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0550000183284283, 
    'stableTimeIncrement': 1.2092162648969e-07, 
    'internalEnergy': 10474.3408203125, 'stepTime': 0.0550000183284283, 
    'totalEnergy': 4324.81884765625, 'jobName': 'Job-1', 
    'artificialEnergy': 3600.8759765625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 455853, 'distortionContrEnergy': 0.0, 
    'externalWork': 1135.21423339844, 'kineticEnergy': 0.0828022286295891, 
    'wallTime': 699.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].boundaryConditions['BC-6'].setValues(v1=3.0)
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-3.0)
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=1.3)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 11508, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 15856, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.03282978614061e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.000886229914613068, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.000886229914613068, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0105575444176793, 
    'stableTimeIncrement': 1.16883541068091e-07, 
    'internalEnergy': 4733.6708984375, 'stepTime': 0.0105575444176793, 
    'totalEnergy': 1876.41076660156, 'jobName': 'Job-1', 
    'artificialEnergy': 1422.54235839844, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 86402, 'distortionContrEnergy': 0.0, 
    'externalWork': 99.5439682006836, 'kineticEnergy': 2.32480478286743, 
    'wallTime': 127.0})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=0.1)
mdb.models['Model-1'].boundaryConditions['BC-6'].setValues(v1=20.0)
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-20.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 5732, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-23-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-24-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-24-axial plunge-2 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-25-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 13284, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.03282978614061e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0393879972398281, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0393879972398281, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500011583790183, 
    'stableTimeIncrement': 1.19119306418725e-07, 
    'internalEnergy': 6259.09033203125, 'stepTime': 0.00500011583790183, 
    'totalEnergy': 2513.23559570312, 'jobName': 'Job-1', 
    'artificialEnergy': 1493.357421875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 41563, 'distortionContrEnergy': 0.0, 
    'externalWork': 890.432373046875, 'kineticEnergy': 1.20164215564728, 
    'wallTime': 62.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100001115351915, 
    'stableTimeIncrement': 1.18863049181073e-07, 
    'internalEnergy': 11289.248046875, 'stepTime': 0.0100001115351915, 
    'totalEnergy': 4487.041015625, 'jobName': 'Job-1', 
    'artificialEnergy': 2126.00146484375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 83592, 'distortionContrEnergy': 0.0, 
    'externalWork': 3135.88891601562, 'kineticEnergy': 0.0469091050326824, 
    'wallTime': 125.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.01500010676682, 
    'stableTimeIncrement': 1.18982669050638e-07, 
    'internalEnergy': 16182.384765625, 'stepTime': 0.01500010676682, 
    'totalEnergy': 6168.60498046875, 'jobName': 'Job-1', 
    'artificialEnergy': 2708.19091796875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 125535, 'distortionContrEnergy': 0.0, 
    'externalWork': 6542.91162109375, 'kineticEnergy': 0.304060190916061, 
    'wallTime': 188.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0200000666081905, 
    'stableTimeIncrement': 1.19217730798482e-07, 
    'internalEnergy': 22409.724609375, 'stepTime': 0.0200000666081905, 
    'totalEnergy': 8259.8876953125, 'jobName': 'Job-1', 
    'artificialEnergy': 3505.13452148438, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 167472, 'distortionContrEnergy': 0.0, 
    'externalWork': 10634.5849609375, 'kineticEnergy': 0.295280784368515, 
    'wallTime': 252.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250000637024641, 
    'stableTimeIncrement': 1.19690369615455e-07, 
    'internalEnergy': 30138.015625, 'stepTime': 0.0250000637024641, 
    'totalEnergy': 10889.5634765625, 'jobName': 'Job-1', 
    'artificialEnergy': 4477.73583984375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 209414, 'distortionContrEnergy': 0.0, 
    'externalWork': 15188.8564453125, 'kineticEnergy': 0.405954241752625, 
    'wallTime': 315.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000235438347, 
    'stableTimeIncrement': 1.2007483007892e-07, 
    'internalEnergy': 39630.53515625, 'stepTime': 0.0300000235438347, 
    'totalEnergy': 14598.4814453125, 'jobName': 'Job-1', 
    'artificialEnergy': 5835.78515625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 251356, 'distortionContrEnergy': 0.0, 
    'externalWork': 20061.904296875, 'kineticEnergy': 9.27976703643799, 
    'wallTime': 379.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000187754631, 
    'stableTimeIncrement': 1.20182136242875e-07, 
    'internalEnergy': 47371.5546875, 'stepTime': 0.0350000187754631, 
    'totalEnergy': 17148.259765625, 'jobName': 'Job-1', 
    'artificialEnergy': 6904.08544921875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 293299, 'distortionContrEnergy': 0.0, 
    'externalWork': 25276.82421875, 'kineticEnergy': 0.274442911148071, 
    'wallTime': 443.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0400000251829624, 
    'stableTimeIncrement': 1.20396151714885e-07, 
    'internalEnergy': 56914.0390625, 'stepTime': 0.0400000251829624, 
    'totalEnergy': 20575.71484375, 'jobName': 'Job-1', 
    'artificialEnergy': 8225.30078125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 335236, 'distortionContrEnergy': 0.0, 
    'externalWork': 30788.2578125, 'kineticEnergy': 0.192590892314911, 
    'wallTime': 507.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0450000800192356, 
    'stableTimeIncrement': 1.209407969327e-07, 'internalEnergy': 65711.359375, 
    'stepTime': 0.0450000800192356, 'totalEnergy': 23596.015625, 
    'jobName': 'Job-1', 'artificialEnergy': 9313.794921875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 377137, 
    'distortionContrEnergy': 0.0, 'externalWork': 36530.6015625, 
    'kineticEnergy': 0.914124846458435, 'wallTime': 570.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0500000417232513, 
    'stableTimeIncrement': 1.18712463859083e-07, 
    'internalEnergy': 74628.953125, 'stepTime': 0.0500000417232513, 
    'totalEnergy': 26344.60546875, 'jobName': 'Job-1', 
    'artificialEnergy': 10493.7373046875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 418726, 'distortionContrEnergy': 0.0, 
    'externalWork': 42771.41796875, 'kineticEnergy': 0.43486961722374, 
    'wallTime': 635.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0550001040101051, 
    'stableTimeIncrement': 1.19506694318261e-07, 
    'internalEnergy': 83758.296875, 'stepTime': 0.0550001040101051, 
    'totalEnergy': 28953.953125, 'jobName': 'Job-1', 
    'artificialEnergy': 11641.3154296875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 460669, 'distortionContrEnergy': 0.0, 
    'externalWork': 49527.7734375, 'kineticEnergy': 0.358768850564957, 
    'wallTime': 699.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0600000247359276, 
    'stableTimeIncrement': 1.19554655952925e-07, 
    'internalEnergy': 93671.3515625, 'stepTime': 0.0600000247359276, 
    'totalEnergy': 31889.8515625, 'jobName': 'Job-1', 
    'artificialEnergy': 12938.1630859375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 502591, 'distortionContrEnergy': 0.0, 
    'externalWork': 56674.359375, 'kineticEnergy': 2.564377784729, 
    'wallTime': 763.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0650000125169754, 
    'stableTimeIncrement': 1.17538867527855e-07, 
    'internalEnergy': 103890.9765625, 'stepTime': 0.0650000125169754, 
    'totalEnergy': 34773.21484375, 'jobName': 'Job-1', 
    'artificialEnergy': 14116.9716796875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 545012, 'distortionContrEnergy': 0.0, 
    'externalWork': 64054.6015625, 'kineticEnergy': 1.96123135089874, 
    'wallTime': 828.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0700000151991844, 
    'stableTimeIncrement': 1.18053122832862e-07, 
    'internalEnergy': 113794.53125, 'stepTime': 0.0700000151991844, 
    'totalEnergy': 37266.12890625, 'jobName': 'Job-1', 
    'artificialEnergy': 15299.9052734375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 586934, 'distortionContrEnergy': 0.0, 
    'externalWork': 71704.1953125, 'kineticEnergy': 1.48715901374817, 
    'wallTime': 892.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0750000029802322, 
    'stableTimeIncrement': 1.17917863917683e-07, 
    'internalEnergy': 123791.1484375, 'stepTime': 0.0750000029802322, 
    'totalEnergy': 39526.0234375, 'jobName': 'Job-1', 
    'artificialEnergy': 16752.943359375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 628856, 'distortionContrEnergy': 0.0, 
    'externalWork': 79656.1015625, 'kineticEnergy': 1.88721215724945, 
    'wallTime': 956.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0800000876188278, 
    'stableTimeIncrement': 1.18671508175794e-07, 
    'internalEnergy': 134249.171875, 'stepTime': 0.0800000876188278, 
    'totalEnergy': 41968.8125, 'jobName': 'Job-1', 
    'artificialEnergy': 19382.85546875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 670769, 'distortionContrEnergy': 0.0, 
    'externalWork': 87864.4609375, 'kineticEnergy': 2.13613486289978, 
    'wallTime': 1020.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0850000008940697, 
    'stableTimeIncrement': 1.19099574646953e-07, 
    'internalEnergy': 144606.109375, 'stepTime': 0.0850000008940697, 
    'totalEnergy': 44089.94921875, 'jobName': 'Job-1', 
    'artificialEnergy': 21261.1953125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 712692, 'distortionContrEnergy': 0.0, 
    'externalWork': 96447.2890625, 'kineticEnergy': 1.69549453258514, 
    'wallTime': 1085.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0900000035762787, 
    'stableTimeIncrement': 1.19502388429282e-07, 
    'internalEnergy': 155153.59375, 'stepTime': 0.0900000035762787, 
    'totalEnergy': 46214.49609375, 'jobName': 'Job-1', 
    'artificialEnergy': 22850.166015625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 754617, 'distortionContrEnergy': 0.0, 
    'externalWork': 105306.875, 'kineticEnergy': 1.21664321422577, 
    'wallTime': 1149.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0950000733137131, 
    'stableTimeIncrement': 1.19776416340756e-07, 'internalEnergy': 165396.3125, 
    'stepTime': 0.0950000733137131, 'totalEnergy': 47921.640625, 
    'jobName': 'Job-1', 'artificialEnergy': 24891.662109375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 796553, 
    'distortionContrEnergy': 0.0, 'externalWork': 114430.59375, 
    'kineticEnergy': 1.49714708328247, 'wallTime': 1213.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.100000001490116, 
    'stableTimeIncrement': 1.19861041980585e-07, 
    'internalEnergy': 174076.40625, 'stepTime': 0.100000001490116, 
    'totalEnergy': 48504.66015625, 'jobName': 'Job-1', 
    'artificialEnergy': 27194.48046875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 838492, 'distortionContrEnergy': 0.0, 
    'externalWork': 122952.796875, 'kineticEnergy': 27.4688587188721, 
    'wallTime': 1277.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Fri Aug  1 18:05:57 2025', 
    'jobName': 'Job-1'})
# Save by mmahd on 2025_08_01-18.07.53; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), mechanicalConstraint=KINEMATIC, name='Int-46', 
    secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#104 ]', ), )), sliding=FINITE)
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['axial plunge-2'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), mechanicalConstraint=KINEMATIC, name='Int-47', 
    secondary=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['work-tube-1'].faces.getSequenceFromMask(
    mask=('[#210 ]', ), )), sliding=FINITE)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A REDUNDANT CONTACT CONDITION HAS BEEN SPECIFIED. THE REDUNDANCY INVOLVES THE CONTACT PAIR REFERENCING SURFACES ASSEMBLY_CP-23-axial plunge-2 AND ASSEMBLY_CP-24-WORK-TUBE-1 AND THE CONTACT PAIR REFERENCING SURFACES ASSEMBLY__PICKEDSURF160 AND ASSEMBLY__PICKEDSURF161.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': "C:\\Users\\mmahd\\OneDrive\\Desktop\\sami's project\\abaqus\\Job-1.odb", 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['CP-24-axial plunge-2-work-tube-1'].suppress(
    )
mdb.models['Model-1'].interactions['CP-23-axial plunge-2-work-tube-1'].suppress(
    )
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 18860, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 10388, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0393880009651184, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0393880009651184, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500000454485416, 
    'stableTimeIncrement': 1.79884096951355e-07, 
    'internalEnergy': 3775.2314453125, 'stepTime': 0.00500000454485416, 
    'totalEnergy': 317.151672363281, 'jobName': 'Job-1', 
    'artificialEnergy': 61.0698890686035, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 27795, 'distortionContrEnergy': 0.0, 
    'externalWork': 3625.4287109375, 'kineticEnergy': 0.0556491799652576, 
    'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100000528618693, 
    'stableTimeIncrement': 1.76965698983622e-07, 
    'internalEnergy': 14958.4609375, 'stepTime': 0.0100000528618693, 
    'totalEnergy': 1286.29174804688, 'jobName': 'Job-1', 
    'artificialEnergy': 215.686660766602, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 55747, 'distortionContrEnergy': 0.0, 
    'externalWork': 14022.7763671875, 'kineticEnergy': 0.0892636328935623, 
    'wallTime': 82.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000210851431, 
    'stableTimeIncrement': 1.75825263681872e-07, 'internalEnergy': 29588.59375, 
    'stepTime': 0.0150000210851431, 'totalEnergy': 2516.416015625, 
    'jobName': 'Job-1', 'artificialEnergy': 698.132751464844, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 84111, 
    'distortionContrEnergy': 0.0, 'externalWork': 27711.341796875, 
    'kineticEnergy': 0.11882483959198, 'wallTime': 125.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0200000181794167, 
    'stableTimeIncrement': 1.76081172753584e-07, 
    'internalEnergy': 45740.28515625, 'stepTime': 0.0200000181794167, 
    'totalEnergy': 3834.30615234375, 'jobName': 'Job-1', 
    'artificialEnergy': 1249.4921875, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 112573, 'distortionContrEnergy': 0.0, 
    'externalWork': 43092.86328125, 'kineticEnergy': 0.0793303772807121, 
    'wallTime': 168.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250001307576895, 
    'stableTimeIncrement': 1.76300758880643e-07, 
    'internalEnergy': 63069.46484375, 'stepTime': 0.0250001307576895, 
    'totalEnergy': 5228.11962890625, 'jobName': 'Job-1', 
    'artificialEnergy': 1959.43371582031, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 140830, 'distortionContrEnergy': 0.0, 
    'externalWork': 59679.75, 'kineticEnergy': 0.062023438513279, 
    'wallTime': 211.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000756978989, 
    'stableTimeIncrement': 1.76490587477929e-07, 
    'internalEnergy': 81621.8203125, 'stepTime': 0.0300000756978989, 
    'totalEnergy': 6697.279296875, 'jobName': 'Job-1', 
    'artificialEnergy': 2857.0751953125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 169086, 'distortionContrEnergy': 0.0, 
    'externalWork': 77483.625, 'kineticEnergy': 0.287671774625778, 
    'wallTime': 255.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000783801079, 
    'stableTimeIncrement': 1.7177664801693e-07, 
    'internalEnergy': 101677.515625, 'stepTime': 0.0350000783801079, 
    'totalEnergy': 8251.765625, 'jobName': 'Job-1', 
    'artificialEnergy': 4037.80395507812, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 198213, 'distortionContrEnergy': 0.0, 
    'externalWork': 96570.828125, 'kineticEnergy': 0.0454786606132984, 
    'wallTime': 300.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0400001406669617, 
    'stableTimeIncrement': 1.71159612705196e-07, 
    'internalEnergy': 122599.140625, 'stepTime': 0.0400001406669617, 
    'totalEnergy': 9869.9013671875, 'jobName': 'Job-1', 
    'artificialEnergy': 5329.5703125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 227391, 'distortionContrEnergy': 0.0, 
    'externalWork': 116700.609375, 'kineticEnergy': 0.045866709202528, 
    'wallTime': 345.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0450000464916229, 
    'stableTimeIncrement': 1.71029739703954e-07, 
    'internalEnergy': 144581.734375, 'stepTime': 0.0450000464916229, 
    'totalEnergy': 11544.0654296875, 'jobName': 'Job-1', 
    'artificialEnergy': 6968.04052734375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 256567, 'distortionContrEnergy': 0.0, 
    'externalWork': 137653.59375, 'kineticEnergy': 0.343629747629166, 
    'wallTime': 390.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0500001534819603, 
    'stableTimeIncrement': 1.71194542986086e-07, 
    'internalEnergy': 167432.515625, 'stepTime': 0.0500001534819603, 
    'totalEnergy': 13292.9033203125, 'jobName': 'Job-1', 
    'artificialEnergy': 8714.9736328125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 285744, 'distortionContrEnergy': 0.0, 
    'externalWork': 159403.71875, 'kineticEnergy': 0.483453929424286, 
    'wallTime': 435.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0550000853836536, 
    'stableTimeIncrement': 1.71375276636354e-07, 
    'internalEnergy': 191235.484375, 'stepTime': 0.0550000853836536, 
    'totalEnergy': 15102.021484375, 'jobName': 'Job-1', 
    'artificialEnergy': 10553.658203125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 314920, 'distortionContrEnergy': 0.0, 
    'externalWork': 182127.15625, 'kineticEnergy': 0.428734213113785, 
    'wallTime': 479.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0600001066923141, 
    'stableTimeIncrement': 1.71562717810048e-07, 
    'internalEnergy': 216273.390625, 'stepTime': 0.0600001066923141, 
    'totalEnergy': 16986.41015625, 'jobName': 'Job-1', 
    'artificialEnergy': 12519.9033203125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 344097, 'distortionContrEnergy': 0.0, 
    'externalWork': 205834.9375, 'kineticEnergy': 0.286214739084244, 
    'wallTime': 524.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0650001242756844, 
    'stableTimeIncrement': 1.7176242295136e-07, 
    'internalEnergy': 242233.140625, 'stepTime': 0.0650001242756844, 
    'totalEnergy': 18923.32421875, 'jobName': 'Job-1', 
    'artificialEnergy': 14688.03515625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 373274, 'distortionContrEnergy': 0.0, 
    'externalWork': 230598.734375, 'kineticEnergy': 0.330932170152664, 
    'wallTime': 569.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0700000673532486, 
    'stableTimeIncrement': 1.7191989343246e-07, 'internalEnergy': 269060.65625, 
    'stepTime': 0.0700000673532486, 'totalEnergy': 20868.74609375, 
    'jobName': 'Job-1', 'artificialEnergy': 17306.693359375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 402451, 
    'distortionContrEnergy': 0.0, 'externalWork': 256414.390625, 
    'kineticEnergy': 0.374701738357544, 'wallTime': 614.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0750000178813934, 
    'stableTimeIncrement': 1.72116543240008e-07, 'internalEnergy': 296657.4375, 
    'stepTime': 0.0750000178813934, 'totalEnergy': 22878.712890625, 
    'jobName': 'Job-1', 'artificialEnergy': 20065.7265625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 431628, 
    'distortionContrEnergy': 0.0, 'externalWork': 283168.21875, 
    'kineticEnergy': 0.396283984184265, 'wallTime': 664.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0800000876188278, 
    'stableTimeIncrement': 1.72316717339527e-07, 'internalEnergy': 325156.125, 
    'stepTime': 0.0800000876188278, 'totalEnergy': 24955.208984375, 
    'jobName': 'Job-1', 'artificialEnergy': 23109.79296875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 460806, 
    'distortionContrEnergy': 0.0, 'externalWork': 310862.09375, 
    'kineticEnergy': 0.419047385454178, 'wallTime': 719.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0850001499056816, 
    'stableTimeIncrement': 1.72508762830148e-07, 'internalEnergy': 354449.625, 
    'stepTime': 0.0850001499056816, 'totalEnergy': 27040.16015625, 
    'jobName': 'Job-1', 'artificialEnergy': 26502.357421875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 489984, 
    'distortionContrEnergy': 0.0, 'externalWork': 339453.8125, 
    'kineticEnergy': 1.42326068878174, 'wallTime': 774.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0900000333786011, 
    'stableTimeIncrement': 1.72723929381391e-07, 'internalEnergy': 384294.25, 
    'stepTime': 0.0900000333786011, 'totalEnergy': 29137.93359375, 
    'jobName': 'Job-1', 'artificialEnergy': 30213.017578125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 519161, 
    'distortionContrEnergy': 0.0, 'externalWork': 368637.03125, 
    'kineticEnergy': 0.806109011173248, 'wallTime': 829.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0950001105666161, 
    'stableTimeIncrement': 1.72968995570955e-07, 'internalEnergy': 414174.9375, 
    'stepTime': 0.0950001105666161, 'totalEnergy': 31097.607421875, 
    'jobName': 'Job-1', 'artificialEnergy': 34679.48828125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 548336, 
    'distortionContrEnergy': 0.0, 'externalWork': 398084.9375, 
    'kineticEnergy': 0.571405291557312, 'wallTime': 889.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.100000001490116, 
    'stableTimeIncrement': 1.7307202426764e-07, 'internalEnergy': 451270.34375, 
    'stepTime': 0.100000001490116, 'totalEnergy': 33439.88671875, 
    'jobName': 'Job-1', 'artificialEnergy': 40498.41015625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 577510, 
    'distortionContrEnergy': 0.0, 'externalWork': 427888.125, 
    'kineticEnergy': 213.439590454102, 'wallTime': 955.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Aug  3 19:42:32 2025', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=1.0)
# Save by mmahd on 2025_08_03-19.57.08; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 4572, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 17116, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0393880009651184, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0393880009651184, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0149688655510545, 
    'stableTimeIncrement': 1.75823444692469e-07, 
    'internalEnergy': 29492.630859375, 'stepTime': 0.0149688655510545, 
    'totalEnergy': 2508.52783203125, 'jobName': 'Job-1', 
    'artificialEnergy': 695.007019042969, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 83934, 'distortionContrEnergy': 0.0, 
    'externalWork': 27620.255859375, 'kineticEnergy': 0.118664041161537, 
    'wallTime': 124.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0291924644261599, 
    'stableTimeIncrement': 1.7646009098371e-07, 
    'internalEnergy': 78548.3203125, 'stepTime': 0.0291924644261599, 
    'totalEnergy': 6455.123046875, 'jobName': 'Job-1', 
    'artificialEnergy': 2701.1630859375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 164522, 'distortionContrEnergy': 0.0, 
    'externalWork': 74524.328125, 'kineticEnergy': 0.259188026189804, 
    'wallTime': 247.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0433459095656872, 
    'stableTimeIncrement': 1.71061500964242e-07, 
    'internalEnergy': 137115.390625, 'stepTime': 0.0433459095656872, 
    'totalEnergy': 10980.2392578125, 'jobName': 'Job-1', 
    'artificialEnergy': 6354.8828125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 246915, 'distortionContrEnergy': 0.0, 
    'externalWork': 130639.1796875, 'kineticEnergy': 0.711670279502869, 
    'wallTime': 372.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0500001534819603, 
    'stableTimeIncrement': 1.71194542986086e-07, 
    'internalEnergy': 167432.515625, 'stepTime': 0.0500001534819603, 
    'totalEnergy': 13292.9033203125, 'jobName': 'Job-1', 
    'artificialEnergy': 8714.9736328125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 285744, 'distortionContrEnergy': 0.0, 
    'externalWork': 159403.71875, 'kineticEnergy': 0.483453929424286, 
    'wallTime': 432.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0665072649717331, 
    'stableTimeIncrement': 1.717938857837e-07, 'internalEnergy': 250247.140625, 
    'stepTime': 0.0665072649717331, 'totalEnergy': 19495.44140625, 
    'jobName': 'Job-1', 'artificialEnergy': 15444.205078125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 382069, 
    'distortionContrEnergy': 0.0, 'externalWork': 238280.125, 
    'kineticEnergy': 0.31962713599205, 'wallTime': 589.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0804488882422447, 
    'stableTimeIncrement': 1.72332121906038e-07, 'internalEnergy': 327745.375, 
    'stepTime': 0.0804488882422447, 'totalEnergy': 25135.97265625, 
    'jobName': 'Job-1', 'artificialEnergy': 23408.412109375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 463425, 
    'distortionContrEnergy': 0.0, 'externalWork': 313395.3125, 
    'kineticEnergy': 0.568110346794128, 'wallTime': 712.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0946895852684975, 
    'stableTimeIncrement': 1.72948617205293e-07, 'internalEnergy': 412304.9375, 
    'stepTime': 0.0946895852684975, 'totalEnergy': 30985.1484375, 
    'jobName': 'Job-1', 'artificialEnergy': 34429.86328125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 546524, 
    'distortionContrEnergy': 0.0, 'externalWork': 396226.9375, 
    'kineticEnergy': 0.354327529668808, 'wallTime': 837.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.100000150501728, 
    'stableTimeIncrement': 1.7307925759269e-07, 'internalEnergy': 443733.1875, 
    'stepTime': 0.100000150501728, 'totalEnergy': 32931.2578125, 
    'jobName': 'Job-1', 'artificialEnergy': 39627.08984375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 577510, 
    'distortionContrEnergy': 0.0, 'externalWork': 427889.125, 
    'kineticEnergy': 0.819813907146454, 'wallTime': 883.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.114182017743587, 
    'stableTimeIncrement': 1.73912155787548e-07, 'internalEnergy': 536155.4375, 
    'stepTime': 0.114182017743587, 'totalEnergy': 39537.38671875, 
    'jobName': 'Job-1', 'artificialEnergy': 52652.85546875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 660250, 
    'distortionContrEnergy': 0.0, 'externalWork': 515129.9375, 
    'kineticEnergy': 5.49169206619263, 'wallTime': 1011.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.128594771027565, 
    'stableTimeIncrement': 1.74892335280674e-07, 'internalEnergy': 633261.375, 
    'stepTime': 0.128594771027565, 'totalEnergy': 46374.5703125, 
    'jobName': 'Job-1', 'artificialEnergy': 69809.0234375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 743470, 
    'distortionContrEnergy': 0.0, 'externalWork': 603146.5625, 
    'kineticEnergy': 6.92443370819092, 'wallTime': 1136.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.143173292279243, 
    'stableTimeIncrement': 1.7580569533493e-07, 'internalEnergy': 729557.8125, 
    'stepTime': 0.143173292279243, 'totalEnergy': 53425.3046875, 
    'jobName': 'Job-1', 'artificialEnergy': 86042.015625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 824999, 
    'distortionContrEnergy': 0.0, 'externalWork': 691069.375, 
    'kineticEnergy': 7.07710027694702, 'wallTime': 1259.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.150000050663948, 
    'stableTimeIncrement': 1.75995978679566e-07, 'internalEnergy': 778289.5625, 
    'stepTime': 0.150000050663948, 'totalEnergy': 57268.64453125, 
    'jobName': 'Job-1', 'artificialEnergy': 94141.1875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 863177, 
    'distortionContrEnergy': 0.0, 'externalWork': 735046.3125, 
    'kineticEnergy': 17.2031383514404, 'wallTime': 1317.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.164921000599861, 
    'stableTimeIncrement': 1.76431058207527e-07, 'internalEnergy': 889398.5625, 
    'stepTime': 0.164921000599861, 'totalEnergy': 65807.625, 
    'jobName': 'Job-1', 'artificialEnergy': 114319.4765625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 946621, 
    'distortionContrEnergy': 0.0, 'externalWork': 835847.0, 
    'kineticEnergy': 5.71573448181152, 'wallTime': 1444.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.179486289620399, 
    'stableTimeIncrement': 1.76902887005781e-07, 'internalEnergy': 1001035.0, 
    'stepTime': 0.179486289620399, 'totalEnergy': 74681.078125, 
    'jobName': 'Job-1', 'artificialEnergy': 131435.25, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 1028076, 'distortionContrEnergy': 0.0, 
    'externalWork': 938324.9375, 'kineticEnergy': 14.179539680481, 
    'wallTime': 1566.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.194465175271034, 
    'stableTimeIncrement': 1.77715108407028e-07, 'internalEnergy': 1121798.375, 
    'stepTime': 0.194465175271034, 'totalEnergy': 84167.453125, 
    'jobName': 'Job-1', 'artificialEnergy': 151357.46875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1111844, 
    'distortionContrEnergy': 0.0, 'externalWork': 1050204.375, 
    'kineticEnergy': 19.237096786499, 'wallTime': 1693.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.200000002980232, 
    'stableTimeIncrement': 1.77881545937453e-07, 'internalEnergy': 1168207.5, 
    'stepTime': 0.200000002980232, 'totalEnergy': 87710.5703125, 
    'jobName': 'Job-1', 'artificialEnergy': 160694.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 1142797, 'distortionContrEnergy': 0.0, 
    'externalWork': 1092042.125, 'kineticEnergy': 15.9842882156372, 
    'wallTime': 1739.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.21492774784565, 
    'stableTimeIncrement': 1.77540428580869e-07, 'internalEnergy': 1290781.0, 
    'stepTime': 0.21492774784565, 'totalEnergy': 97571.1484375, 
    'jobName': 'Job-1', 'artificialEnergy': 181473.921875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1226279, 
    'distortionContrEnergy': 0.0, 'externalWork': 1205408.0, 
    'kineticEnergy': 15.7214393615723, 'wallTime': 1865.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.229865148663521, 
    'stableTimeIncrement': 1.77027601466762e-07, 'internalEnergy': 1421304.375, 
    'stepTime': 0.229865148663521, 'totalEnergy': 109157.515625, 
    'jobName': 'Job-1', 'artificialEnergy': 204082.09375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1309815, 
    'distortionContrEnergy': 0.0, 'externalWork': 1323381.0, 
    'kineticEnergy': 23.7833976745605, 'wallTime': 1992.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.245089709758759, 
    'stableTimeIncrement': 1.69059390486836e-07, 'internalEnergy': 1572938.375, 
    'stepTime': 0.245089709758759, 'totalEnergy': 122002.0234375, 
    'jobName': 'Job-1', 'artificialEnergy': 240461.953125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1400702, 
    'distortionContrEnergy': 0.0, 'externalWork': 1450195.625, 
    'kineticEnergy': 29.4441013336182, 'wallTime': 2115.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.250000029802322, 
    'stableTimeIncrement': 1.69312983189229e-07, 'internalEnergy': 1620469.125, 
    'stepTime': 0.250000029802322, 'totalEnergy': 126250.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 249924.578125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1430641, 
    'distortionContrEnergy': 0.0, 'externalWork': 1492334.125, 
    'kineticEnergy': 31.2781715393066, 'wallTime': 2154.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.267527192831039, 
    'stableTimeIncrement': 1.70235963992127e-07, 'internalEnergy': 1787328.375, 
    'stepTime': 0.267527192831039, 'totalEnergy': 141567.359375, 
    'jobName': 'Job-1', 'artificialEnergy': 276520.84375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1528660, 
    'distortionContrEnergy': 0.0, 'externalWork': 1643538.0, 
    'kineticEnergy': 16.7339744567871, 'wallTime': 2281.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.284534186124802, 
    'stableTimeIncrement': 1.70932594301121e-07, 'internalEnergy': 1952318.625, 
    'stepTime': 0.284534186124802, 'totalEnergy': 155555.515625, 
    'jobName': 'Job-1', 'artificialEnergy': 304909.28125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1623770, 
    'distortionContrEnergy': 0.0, 'externalWork': 1798935.0, 
    'kineticEnergy': 30.8379726409912, 'wallTime': 2405.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.300000160932541, 
    'stableTimeIncrement': 1.72009023913233e-07, 'internalEnergy': 2115194.75, 
    'stepTime': 0.300000160932541, 'totalEnergy': 170017.171875, 
    'jobName': 'Job-1', 'artificialEnergy': 335923.78125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1710262, 
    'distortionContrEnergy': 0.0, 'externalWork': 1947032.875, 
    'kineticEnergy': 19.4387645721436, 'wallTime': 2516.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.317359417676926, 
    'stableTimeIncrement': 1.72721087210448e-07, 'internalEnergy': 2307764.0, 
    'stepTime': 0.317359417676926, 'totalEnergy': 187461.65625, 
    'jobName': 'Job-1', 'artificialEnergy': 368888.46875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1807342, 
    'distortionContrEnergy': 0.0, 'externalWork': 2117860.5, 
    'kineticEnergy': 35.320198059082, 'wallTime': 2642.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.334532886743546, 
    'stableTimeIncrement': 1.67098406222976e-07, 'internalEnergy': 2524946.0, 
    'stepTime': 0.334532886743546, 'totalEnergy': 207381.75, 
    'jobName': 'Job-1', 'artificialEnergy': 399282.9375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1903383, 
    'distortionContrEnergy': 0.0, 'externalWork': 2302792.5, 
    'kineticEnergy': 856.133666992188, 'wallTime': 2766.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.349168717861176, 
    'stableTimeIncrement': 1.58107923198259e-07, 'internalEnergy': 2757550.0, 
    'stepTime': 0.349168717861176, 'totalEnergy': 228118.5, 'jobName': 'Job-1', 
    'artificialEnergy': 455734.375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1998789, 'distortionContrEnergy': 0.0, 
    'externalWork': 2475899.25, 'kineticEnergy': 60.618335723877, 
    'wallTime': 2890.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.350000023841858, 
    'stableTimeIncrement': 1.57973730097183e-07, 'internalEnergy': 2769657.25, 
    'stepTime': 0.350000023841858, 'totalEnergy': 229326.484375, 
    'jobName': 'Job-1', 'artificialEnergy': 458946.53125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2004364, 
    'distortionContrEnergy': 0.0, 'externalWork': 2486057.5, 
    'kineticEnergy': 48.7308044433594, 'wallTime': 2897.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.364588767290115, 
    'stableTimeIncrement': 1.55108892840872e-07, 'internalEnergy': 2990816.0, 
    'stepTime': 0.364588767290115, 'totalEnergy': 248842.25, 
    'jobName': 'Job-1', 'artificialEnergy': 511475.75, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2102241, 'distortionContrEnergy': 0.0, 
    'externalWork': 2668260.75, 'kineticEnergy': 58.6555366516113, 
    'wallTime': 3031.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.37923675775528, 
    'stableTimeIncrement': 1.52975346168205e-07, 'internalEnergy': 3212903.25, 
    'stepTime': 0.37923675775528, 'totalEnergy': 268059.34375, 
    'jobName': 'Job-1', 'artificialEnergy': 564991.6875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2200539, 
    'distortionContrEnergy': 0.0, 'externalWork': 2861331.5, 
    'kineticEnergy': 39.3410110473633, 'wallTime': 3160.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.393428832292557, 
    'stableTimeIncrement': 1.50796097386774e-07, 'internalEnergy': 3431247.25, 
    'stepTime': 0.393428832292557, 'totalEnergy': 287772.09375, 
    'jobName': 'Job-1', 'artificialEnergy': 623544.25, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2295778, 'distortionContrEnergy': 0.0, 
    'externalWork': 3046812.0, 'kineticEnergy': 43.1726264953613, 
    'wallTime': 3283.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.400000095367432, 
    'stableTimeIncrement': 1.49958040651654e-07, 'internalEnergy': 3528210.5, 
    'stepTime': 0.400000095367432, 'totalEnergy': 296871.25, 
    'jobName': 'Job-1', 'artificialEnergy': 645756.75, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2339877, 'distortionContrEnergy': 0.0, 
    'externalWork': 3131221.0, 'kineticEnergy': 40.9571762084961, 
    'wallTime': 3342.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.414396107196808, 
    'stableTimeIncrement': 1.47540802686308e-07, 'internalEnergy': 3754389.5, 
    'stepTime': 0.414396107196808, 'totalEnergy': 318949.40625, 
    'jobName': 'Job-1', 'artificialEnergy': 698636.25, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2436487, 'distortionContrEnergy': 0.0, 
    'externalWork': 3321226.5, 'kineticEnergy': 67.6518859863281, 
    'wallTime': 3467.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.42857426404953, 
    'stableTimeIncrement': 1.45056333167304e-07, 'internalEnergy': 3982923.25, 
    'stepTime': 0.42857426404953, 'totalEnergy': 340975.71875, 
    'jobName': 'Job-1', 'artificialEnergy': 753353.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2531635, 
    'distortionContrEnergy': 0.0, 'externalWork': 3513895.75, 
    'kineticEnergy': 68.4568023681641, 'wallTime': 3590.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.44341254234314, 
    'stableTimeIncrement': 1.43613263503539e-07, 'internalEnergy': 4232557.0, 
    'stepTime': 0.44341254234314, 'totalEnergy': 367520.0, 'jobName': 'Job-1', 
    'artificialEnergy': 808414.125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2631213, 'distortionContrEnergy': 0.0, 
    'externalWork': 3729144.75, 'kineticEnergy': 64.7577209472656, 
    'wallTime': 3723.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.450000047683716, 
    'stableTimeIncrement': 1.43080796988215e-07, 'internalEnergy': 4347594.0, 
    'stepTime': 0.450000047683716, 'totalEnergy': 378498.625, 
    'jobName': 'Job-1', 'artificialEnergy': 837200.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2675421, 
    'distortionContrEnergy': 0.0, 'externalWork': 3827857.0, 
    'kineticEnergy': 64.9230880737305, 'wallTime': 3780.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.464339762926102, 
    'stableTimeIncrement': 1.40730563202851e-07, 'internalEnergy': 4598985.5, 
    'stepTime': 0.464339762926102, 'totalEnergy': 403275.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 907835.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2771652, 
    'distortionContrEnergy': 0.0, 'externalWork': 4030711.0, 
    'kineticEnergy': 141.495300292969, 'wallTime': 3903.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.478686451911926, 
    'stableTimeIncrement': 1.38491998313839e-07, 'internalEnergy': 4826504.5, 
    'stepTime': 0.478686451911926, 'totalEnergy': 424946.625, 
    'jobName': 'Job-1', 'artificialEnergy': 953339.25, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2867931, 'distortionContrEnergy': 0.0, 
    'externalWork': 4215474.0, 'kineticEnergy': 85.6324996948242, 
    'wallTime': 4026.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.493395537137985, 
    'stableTimeIncrement': 1.39880754090882e-07, 'internalEnergy': 5064698.0, 
    'stepTime': 0.493395537137985, 'totalEnergy': 452305.375, 
    'jobName': 'Job-1', 'artificialEnergy': 1015760.9375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2966642, 
    'distortionContrEnergy': 0.0, 'externalWork': 4403888.0, 
    'kineticEnergy': 162.816177368164, 'wallTime': 4152.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.5, 
    'stableTimeIncrement': 1.34984702526708e-07, 'internalEnergy': 5180974.0, 
    'stepTime': 0.5, 'totalEnergy': 465277.3125, 'jobName': 'Job-1', 
    'artificialEnergy': 1047960.125, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3010964, 'distortionContrEnergy': 0.0, 
    'externalWork': 4488895.5, 'kineticEnergy': 243.885375976562, 
    'wallTime': 4209.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.511471509933472, 
    'stableTimeIncrement': 1.32354855963968e-07, 'internalEnergy': 5420153.0, 
    'stepTime': 0.511471509933472, 'totalEnergy': 493451.625, 
    'jobName': 'Job-1', 'artificialEnergy': 1114869.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 3107194, 'distortionContrEnergy': 0.0, 
    'externalWork': 4669547.0, 'kineticEnergy': 79.302001953125, 
    'wallTime': 4332.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.522931396961212, 
    'stableTimeIncrement': 1.29696431372395e-07, 'internalEnergy': 5658500.0, 
    'stepTime': 0.522931396961212, 'totalEnergy': 520864.65625, 
    'jobName': 'Job-1', 'artificialEnergy': 1183771.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3203320, 
    'distortionContrEnergy': 0.0, 'externalWork': 4847147.0, 
    'kineticEnergy': 109.357963562012, 'wallTime': 4455.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.534800350666046, 
    'stableTimeIncrement': 1.272911021033e-07, 'internalEnergy': 5912826.0, 
    'stepTime': 0.534800350666046, 'totalEnergy': 549713.8125, 
    'jobName': 'Job-1', 'artificialEnergy': 1264597.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 3302884, 'distortionContrEnergy': 0.0, 
    'externalWork': 5042266.5, 'kineticEnergy': 62.2459564208984, 
    'wallTime': 4582.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.546290040016174, 
    'stableTimeIncrement': 1.24352538932726e-07, 'internalEnergy': 6165265.0, 
    'stepTime': 0.546290040016174, 'totalEnergy': 576609.6875, 
    'jobName': 'Job-1', 'artificialEnergy': 1340367.625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3399263, 
    'distortionContrEnergy': 0.0, 'externalWork': 5230072.5, 
    'kineticEnergy': 82.0743560791016, 'wallTime': 4705.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.550000071525574, 
    'stableTimeIncrement': 1.23581131106221e-07, 'internalEnergy': 6246039.0, 
    'stepTime': 0.550000071525574, 'totalEnergy': 584792.3125, 
    'jobName': 'Job-1', 'artificialEnergy': 1360417.125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3430385, 
    'distortionContrEnergy': 0.0, 'externalWork': 5292518.5, 
    'kineticEnergy': 85.5741424560547, 'wallTime': 4745.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.561432957649231, 
    'stableTimeIncrement': 1.21621070547917e-07, 'internalEnergy': 6486434.0, 
    'stepTime': 0.561432957649231, 'totalEnergy': 611122.25, 
    'jobName': 'Job-1', 'artificialEnergy': 1435839.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3526291, 
    'distortionContrEnergy': 0.0, 'externalWork': 5479438.0, 
    'kineticEnergy': 88.6393661499023, 'wallTime': 4868.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.573372840881348, 
    'stableTimeIncrement': 1.19384168328907e-07, 'internalEnergy': 6738722.0, 
    'stepTime': 0.573372840881348, 'totalEnergy': 636616.625, 
    'jobName': 'Job-1', 'artificialEnergy': 1527120.125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3626450, 
    'distortionContrEnergy': 0.0, 'externalWork': 5675412.0, 
    'kineticEnergy': 66.9718627929688, 'wallTime': 4996.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.584938049316406, 
    'stableTimeIncrement': 1.18061535658853e-07, 'internalEnergy': 6902561.5, 
    'stepTime': 0.584938049316406, 'totalEnergy': 649093.75, 
    'jobName': 'Job-1', 'artificialEnergy': 1594578.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3723466, 
    'distortionContrEnergy': 0.0, 'externalWork': 5835477.0, 
    'kineticEnergy': 61.9962196350098, 'wallTime': 5118.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.596585154533386, 
    'stableTimeIncrement': 1.1695846069415e-07, 'internalEnergy': 7043323.0, 
    'stepTime': 0.596585154533386, 'totalEnergy': 662883.375, 
    'jobName': 'Job-1', 'artificialEnergy': 1665525.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3821169, 
    'distortionContrEnergy': 0.0, 'externalWork': 5966135.0, 
    'kineticEnergy': 132.748458862305, 'wallTime': 5241.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.600000023841858, 
    'stableTimeIncrement': 1.16563825258709e-07, 'internalEnergy': 7089044.5, 
    'stepTime': 0.600000023841858, 'totalEnergy': 666674.4375, 
    'jobName': 'Job-1', 'artificialEnergy': 1679469.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3849815, 
    'distortionContrEnergy': 0.0, 'externalWork': 6005997.0, 
    'kineticEnergy': 46.6971092224121, 'wallTime': 5278.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.611581563949585, 
    'stableTimeIncrement': 1.15657847743478e-07, 'internalEnergy': 7254819.5, 
    'stepTime': 0.611581563949585, 'totalEnergy': 687847.75, 
    'jobName': 'Job-1', 'artificialEnergy': 1723030.125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3946968, 
    'distortionContrEnergy': 0.0, 'externalWork': 6148761.5, 
    'kineticEnergy': 59.2593650817871, 'wallTime': 5401.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.623550057411194, 
    'stableTimeIncrement': 1.14831038899865e-07, 'internalEnergy': 7436662.5, 
    'stepTime': 0.623550057411194, 'totalEnergy': 708900.125, 
    'jobName': 'Job-1', 'artificialEnergy': 1768234.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4047367, 
    'distortionContrEnergy': 0.0, 'externalWork': 6304655.5, 
    'kineticEnergy': 135.746078491211, 'wallTime': 5528.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.635313034057617, 
    'stableTimeIncrement': 1.13051989103496e-07, 'internalEnergy': 7623563.5, 
    'stepTime': 0.635313034057617, 'totalEnergy': 729247.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 1827199.125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4146042, 
    'distortionContrEnergy': 0.0, 'externalWork': 6464583.0, 
    'kineticEnergy': 77.4471130371094, 'wallTime': 5667.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.646512508392334, 
    'stableTimeIncrement': 1.11244958134193e-07, 'internalEnergy': 7802944.0, 
    'stepTime': 0.646512508392334, 'totalEnergy': 750476.25, 
    'jobName': 'Job-1', 'artificialEnergy': 1889906.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4239990, 
    'distortionContrEnergy': 0.0, 'externalWork': 6618524.0, 
    'kineticEnergy': 109.624855041504, 'wallTime': 5797.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.649999976158142, 
    'stableTimeIncrement': 1.10748842985231e-07, 'internalEnergy': 7860030.5, 
    'stepTime': 0.649999976158142, 'totalEnergy': 757567.6875, 
    'jobName': 'Job-1', 'artificialEnergy': 1904234.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4269245, 
    'distortionContrEnergy': 0.0, 'externalWork': 6666834.5, 
    'kineticEnergy': 124.214302062988, 'wallTime': 5837.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.661385178565979, 
    'stableTimeIncrement': 1.08733495096658e-07, 'internalEnergy': 8047490.0, 
    'stepTime': 0.661385178565979, 'totalEnergy': 777312.75, 
    'jobName': 'Job-1', 'artificialEnergy': 1980691.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4364751, 
    'distortionContrEnergy': 0.0, 'externalWork': 6820662.5, 
    'kineticEnergy': 231.385772705078, 'wallTime': 5965.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.672834753990173, 
    'stableTimeIncrement': 1.07263190329832e-07, 'internalEnergy': 8236726.0, 
    'stepTime': 0.672834753990173, 'totalEnergy': 798774.875, 
    'jobName': 'Job-1', 'artificialEnergy': 2045608.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4460797, 
    'distortionContrEnergy': 0.0, 'externalWork': 6978912.5, 
    'kineticEnergy': 167.38557434082, 'wallTime': 6093.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.684242129325867, 
    'stableTimeIncrement': 1.05928549487544e-07, 'internalEnergy': 8430373.0, 
    'stepTime': 0.684242129325867, 'totalEnergy': 822786.3125, 
    'jobName': 'Job-1', 'artificialEnergy': 2114543.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 4556489, 'distortionContrEnergy': 0.0, 
    'externalWork': 7139323.5, 'kineticEnergy': 61.2834281921387, 
    'wallTime': 6226.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.69570255279541, 
    'stableTimeIncrement': 1.05194885691162e-07, 'internalEnergy': 8621625.0, 
    'stepTime': 0.69570255279541, 'totalEnergy': 844580.4375, 
    'jobName': 'Job-1', 'artificialEnergy': 2189059.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4652626, 
    'distortionContrEnergy': 0.0, 'externalWork': 7301323.5, 
    'kineticEnergy': 55.9175910949707, 'wallTime': 6361.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.700000047683716, 
    'stableTimeIncrement': 1.04688275825993e-07, 'internalEnergy': 8695732.0, 
    'stepTime': 0.700000047683716, 'totalEnergy': 851590.8125, 
    'jobName': 'Job-1', 'artificialEnergy': 2216350.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 4688676, 'distortionContrEnergy': 0.0, 
    'externalWork': 7363768.5, 'kineticEnergy': 109.8095703125, 
    'wallTime': 6410.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
# Save by mmahd on 2025_08_03-21.47.15; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=0.1)
mdb.models['Model-1'].boundaryConditions['BC-6'].setValues(v1=400.0)
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-400.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 8276, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 10132, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 15.7552003860474, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 15.7552003860474, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500004785135388, 
    'stableTimeIncrement': 1.63127765517856e-07, 
    'internalEnergy': 460963.78125, 'stepTime': 0.00500004785135388, 
    'totalEnergy': 34080.265625, 'jobName': 'Job-1', 
    'artificialEnergy': 44616.7109375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 30286, 'distortionContrEnergy': 0.0, 
    'externalWork': 472656.0625, 'kineticEnergy': 20.4398288726807, 
    'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100000705569983, 
    'stableTimeIncrement': 1.6635999600112e-07, 'internalEnergy': 1219316.5, 
    'stepTime': 0.0100000705569983, 'totalEnergy': 83784.9140625, 
    'jobName': 'Job-1', 'artificialEnergy': 190521.3125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 60596, 
    'distortionContrEnergy': 0.0, 'externalWork': 1229909.25, 
    'kineticEnergy': 29.114444732666, 'wallTime': 79.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000369176269, 
    'stableTimeIncrement': 1.71503643286997e-07, 'internalEnergy': 2192011.25, 
    'stepTime': 0.0150000369176269, 'totalEnergy': 144470.359375, 
    'jobName': 'Job-1', 'artificialEnergy': 410306.59375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 90067, 
    'distortionContrEnergy': 0.0, 'externalWork': 2190295.0, 
    'kineticEnergy': 35.231819152832, 'wallTime': 117.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0200001131743193, 
    'stableTimeIncrement': 1.53609008179956e-07, 'internalEnergy': 3529381.5, 
    'stepTime': 0.0200001131743193, 'totalEnergy': 231812.96875, 
    'jobName': 'Job-1', 'artificialEnergy': 715521.9375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 120078, 
    'distortionContrEnergy': 0.0, 'externalWork': 3320889.25, 
    'kineticEnergy': 953.973937988281, 'wallTime': 157.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250001139938831, 
    'stableTimeIncrement': 1.34524881900688e-07, 'internalEnergy': 5287324.5, 
    'stepTime': 0.0250001139938831, 'totalEnergy': 356470.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 1156290.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 154459, 
    'distortionContrEnergy': 0.0, 'externalWork': 4739995.0, 
    'kineticEnergy': 1748.45288085938, 'wallTime': 205.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000924617052, 
    'stableTimeIncrement': 1.13103787668933e-07, 'internalEnergy': 7039998.5, 
    'stepTime': 0.0300000924617052, 'totalEnergy': 476831.0625, 
    'jobName': 'Job-1', 'artificialEnergy': 1699755.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 194602, 
    'distortionContrEnergy': 0.0, 'externalWork': 6161051.5, 
    'kineticEnergy': 426.434173583984, 'wallTime': 262.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000187754631, 
    'stableTimeIncrement': 9.63001767217975e-08, 'internalEnergy': 8642872.0, 
    'stepTime': 0.0350000187754631, 'totalEnergy': 584268.625, 
    'jobName': 'Job-1', 'artificialEnergy': 2164890.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 241938, 
    'distortionContrEnergy': 0.0, 'externalWork': 7620673.0, 
    'kineticEnergy': 669.839782714844, 'wallTime': 325.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-800.0)
mdb.models['Model-1'].boundaryConditions['BC-6'].setValues(v1=800.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 18640, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 20392, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 63.0208015441895, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 63.0208015441895, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500015588477254, 
    'stableTimeIncrement': 1.68378676335124e-07, 'internalEnergy': 1250734.625, 
    'stepTime': 0.00500015588477254, 'totalEnergy': 83889.4609375, 
    'jobName': 'Job-1', 'artificialEnergy': 219948.015625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 30100, 
    'distortionContrEnergy': 0.0, 'externalWork': 1309791.375, 
    'kineticEnergy': 84.935546875, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100001664832234, 
    'stableTimeIncrement': 1.67311753784816e-07, 'internalEnergy': 3396716.0, 
    'stepTime': 0.0100001664832234, 'totalEnergy': 212123.28125, 
    'jobName': 'Job-1', 'artificialEnergy': 814661.625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 59527, 
    'distortionContrEnergy': 0.0, 'externalWork': 3329444.25, 
    'kineticEnergy': 2586.80493164062, 'wallTime': 80.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000965222716, 
    'stableTimeIncrement': 1.05344625467296e-07, 'internalEnergy': 6738734.0, 
    'stepTime': 0.0150000965222716, 'totalEnergy': 433305.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 1815207.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 97918, 
    'distortionContrEnergy': 0.0, 'externalWork': 6138988.0, 
    'kineticEnergy': 1221.20471191406, 'wallTime': 132.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0200000368058681, 
    'stableTimeIncrement': 7.35236511673065e-08, 'internalEnergy': 10109943.0, 
    'stepTime': 0.0200000368058681, 'totalEnergy': 665954.0, 
    'jobName': 'Job-1', 'artificialEnergy': 2709806.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 153701, 
    'distortionContrEnergy': 0.0, 'externalWork': 8932670.0, 
    'kineticEnergy': 910.778564453125, 'wallTime': 207.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 14264, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 6600, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 63.0208015441895, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 63.0208015441895, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500015588477254, 
    'stableTimeIncrement': 1.68378676335124e-07, 'internalEnergy': 1250734.625, 
    'stepTime': 0.00500015588477254, 'totalEnergy': 83889.4609375, 
    'jobName': 'Job-1', 'artificialEnergy': 219948.015625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 30100, 
    'distortionContrEnergy': 0.0, 'externalWork': 1309791.375, 
    'kineticEnergy': 84.935546875, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100001664832234, 
    'stableTimeIncrement': 1.67311753784816e-07, 'internalEnergy': 3396716.0, 
    'stepTime': 0.0100001664832234, 'totalEnergy': 212123.28125, 
    'jobName': 'Job-1', 'artificialEnergy': 814661.625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 59527, 
    'distortionContrEnergy': 0.0, 'externalWork': 3329444.25, 
    'kineticEnergy': 2586.80493164062, 'wallTime': 79.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150000965222716, 
    'stableTimeIncrement': 1.05344625467296e-07, 'internalEnergy': 6738734.0, 
    'stepTime': 0.0150000965222716, 'totalEnergy': 433305.5625, 
    'jobName': 'Job-1', 'artificialEnergy': 1815207.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 97918, 
    'distortionContrEnergy': 0.0, 'externalWork': 6138988.0, 
    'kineticEnergy': 1221.20471191406, 'wallTime': 129.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0200000368058681, 
    'stableTimeIncrement': 7.35236511673065e-08, 'internalEnergy': 10109943.0, 
    'stepTime': 0.0200000368058681, 'totalEnergy': 665954.0, 
    'jobName': 'Job-1', 'artificialEnergy': 2709806.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 153701, 
    'distortionContrEnergy': 0.0, 'externalWork': 8932670.0, 
    'kineticEnergy': 910.778564453125, 'wallTime': 202.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250000078231096, 
    'stableTimeIncrement': 5.38948086159508e-08, 'internalEnergy': 13251368.0, 
    'stepTime': 0.0250000078231096, 'totalEnergy': 844631.875, 
    'jobName': 'Job-1', 'artificialEnergy': 3720829.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 235138, 'distortionContrEnergy': 0.0, 
    'externalWork': 12042328.0, 'kineticEnergy': 128.601043701172, 
    'wallTime': 308.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0296014398336411, 
    'stableTimeIncrement': 4.79255604091122e-08, 'internalEnergy': 15328200.0, 
    'stepTime': 0.0296014398336411, 'totalEnergy': 986143.375, 
    'jobName': 'Job-1', 'artificialEnergy': 4006058.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 330912, 'distortionContrEnergy': 0.0, 
    'externalWork': 14128497.0, 'kineticEnergy': 184.871429443359, 
    'wallTime': 431.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000235438347, 
    'stableTimeIncrement': 3.97655988138013e-08, 'internalEnergy': 15482699.0, 
    'stepTime': 0.0300000235438347, 'totalEnergy': 996880.4375, 
    'jobName': 'Job-1', 'artificialEnergy': 4029201.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 340562, 'distortionContrEnergy': 0.0, 
    'externalWork': 14286464.0, 'kineticEnergy': 85.9091491699219, 
    'wallTime': 443.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0336712077260017, 
    'stableTimeIncrement': 3.2371698210909e-08, 'internalEnergy': 16935956.0, 
    'stepTime': 0.0336712077260017, 'totalEnergy': 1097969.125, 
    'jobName': 'Job-1', 'artificialEnergy': 4214588.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 439203, 'distortionContrEnergy': 0.0, 
    'externalWork': 15760167.0, 'kineticEnergy': 106.662528991699, 
    'wallTime': 570.0})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000001490116, 
    'stableTimeIncrement': 3.22439674960151e-08, 'internalEnergy': 17487730.0, 
    'stepTime': 0.0350000001490116, 'totalEnergy': 1135094.75, 
    'jobName': 'Job-1', 'artificialEnergy': 4275683.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 481691, 'distortionContrEnergy': 0.0, 
    'externalWork': 16321184.0, 'kineticEnergy': 163.700088500977, 
    'wallTime': 625.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis terminated by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-6'].setValues(v1=200.0)
mdb.models['Model-1'].boundaryConditions['BC-7'].setValues(v1=-200.0)
# Save by mmahd on 2025_08_04-16.18.57; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'Mahdi', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '150 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'Mahdi', 'handle': 7440, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2251 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-14-lower die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-7-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY_CP-18-upper die-1 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY_CP-14-WORK-TUBE-1. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF158 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF159. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'ASSEMBLY__PICKEDSURF160 is a rigid surface, so it will be made the main surface in the contact pair with surface ASSEMBLY__PICKEDSURF161. The WEIGHT value reported in the .dat file for this contact pair is not correct.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The element 3459 instance lower die-1 is severely distorted for second-order tetrahedron. Some midside nodes of element might have improper coordinates. The distorted element may cause numerical problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'Mahdi', 'handle': 18564, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 1.58954051698856e-07, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 3.93880009651184, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 3.93880009651184, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The option *BOUNDARY,TYPE=DISPLACEMENT has been used with a jump in displacements at the nodes in node set WarnNodeDispBCJump-Step1 at the beginning of the next step; all jumps in displacement across steps are ignored. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00500010885298252, 
    'stableTimeIncrement': 1.71268865756247e-07, 'internalEnergy': 170241.0625, 
    'stepTime': 0.00500010885298252, 'totalEnergy': 13428.98046875, 
    'jobName': 'Job-1', 'artificialEnergy': 8778.091796875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 28845, 
    'distortionContrEnergy': 0.0, 'externalWork': 168498.8125, 
    'kineticEnergy': 5.13926839828491, 'wallTime': 49.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0100000612437725, 
    'stableTimeIncrement': 1.73088565702528e-07, 
    'internalEnergy': 451233.34375, 'stepTime': 0.0100000612437725, 
    'totalEnergy': 33452.26953125, 'jobName': 'Job-1', 
    'artificialEnergy': 41878.40625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 57877, 'distortionContrEnergy': 0.0, 
    'externalWork': 453226.84375, 'kineticEnergy': 13.195276260376, 
    'wallTime': 107.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0150001011788845, 
    'stableTimeIncrement': 1.74269601416199e-07, 'internalEnergy': 787391.9375, 
    'stepTime': 0.0150001011788845, 'totalEnergy': 55991.24609375, 
    'jobName': 'Job-1', 'artificialEnergy': 99849.203125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 86619, 
    'distortionContrEnergy': 0.0, 'externalWork': 780402.875, 
    'kineticEnergy': 13.1934061050415, 'wallTime': 171.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.020000109449029, 
    'stableTimeIncrement': 1.76167048948628e-07, 'internalEnergy': 1188058.75, 
    'stepTime': 0.020000109449029, 'totalEnergy': 82772.5390625, 
    'jobName': 'Job-1', 'artificialEnergy': 173161.0625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 115154, 
    'distortionContrEnergy': 0.0, 'externalWork': 1169211.875, 
    'kineticEnergy': 8.60353469848633, 'wallTime': 237.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0250000711530447, 
    'stableTimeIncrement': 1.71125705605846e-07, 'internalEnergy': 1644826.875, 
    'stepTime': 0.0250000711530447, 'totalEnergy': 112184.3984375, 
    'jobName': 'Job-1', 'artificialEnergy': 268778.59375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 144227, 
    'distortionContrEnergy': 0.0, 'externalWork': 1603683.0, 
    'kineticEnergy': 30.5415687561035, 'wallTime': 287.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0300000458955765, 
    'stableTimeIncrement': 1.71224158407313e-07, 'internalEnergy': 2153534.75, 
    'stepTime': 0.0300000458955765, 'totalEnergy': 144751.265625, 
    'jobName': 'Job-1', 'artificialEnergy': 372112.375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 173441, 
    'distortionContrEnergy': 0.0, 'externalWork': 2094682.875, 
    'kineticEnergy': 27.7925090789795, 'wallTime': 336.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0350000560283661, 
    'stableTimeIncrement': 1.72275591125981e-07, 'internalEnergy': 2748725.0, 
    'stepTime': 0.0350000560283661, 'totalEnergy': 182112.78125, 
    'jobName': 'Job-1', 'artificialEnergy': 505221.875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 202614, 
    'distortionContrEnergy': 0.0, 'externalWork': 2650336.0, 
    'kineticEnergy': 60.4038887023926, 'wallTime': 388.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0400000512599945, 
    'stableTimeIncrement': 1.60805683435683e-07, 'internalEnergy': 3481840.5, 
    'stepTime': 0.0400000512599945, 'totalEnergy': 232866.9375, 
    'jobName': 'Job-1', 'artificialEnergy': 650607.0625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 232433, 
    'distortionContrEnergy': 0.0, 'externalWork': 3255456.0, 
    'kineticEnergy': 634.992492675781, 'wallTime': 436.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0450000464916229, 
    'stableTimeIncrement': 1.52846325818246e-07, 'internalEnergy': 4285862.0, 
    'stepTime': 0.0450000464916229, 'totalEnergy': 292286.4375, 
    'jobName': 'Job-1', 'artificialEnergy': 801073.8125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 264318, 
    'distortionContrEnergy': 0.0, 'externalWork': 3949411.5, 
    'kineticEnergy': 554.193725585938, 'wallTime': 484.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0500000976026058, 
    'stableTimeIncrement': 1.35362412834183e-07, 'internalEnergy': 5365997.0, 
    'stepTime': 0.0500000976026058, 'totalEnergy': 378732.9375, 
    'jobName': 'Job-1', 'artificialEnergy': 1043634.3125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 298521, 
    'distortionContrEnergy': 0.0, 'externalWork': 4722059.0, 
    'kineticEnergy': 2109.61059570312, 'wallTime': 534.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0550000555813313, 
    'stableTimeIncrement': 1.2664189341649e-07, 'internalEnergy': 6316550.5, 
    'stepTime': 0.0550000555813313, 'totalEnergy': 451371.59375, 
    'jobName': 'Job-1', 'artificialEnergy': 1280425.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 336570, 
    'distortionContrEnergy': 0.0, 'externalWork': 5468075.0, 
    'kineticEnergy': 778.970520019531, 'wallTime': 592.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0600000731647015, 
    'stableTimeIncrement': 1.17430076329583e-07, 'internalEnergy': 7196578.5, 
    'stepTime': 0.0600000731647015, 'totalEnergy': 516181.21875, 
    'jobName': 'Job-1', 'artificialEnergy': 1543870.5, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 377168, 'distortionContrEnergy': 0.0, 
    'externalWork': 6197128.0, 'kineticEnergy': 538.040283203125, 
    'wallTime': 659.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0650000423192978, 
    'stableTimeIncrement': 1.05213224799172e-07, 'internalEnergy': 7933852.0, 
    'stepTime': 0.0650000423192978, 'totalEnergy': 576867.375, 
    'jobName': 'Job-1', 'artificialEnergy': 1717533.625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 422007, 
    'distortionContrEnergy': 0.0, 'externalWork': 6846121.0, 
    'kineticEnergy': 489.560455322266, 'wallTime': 743.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0700000524520874, 
    'stableTimeIncrement': 9.08470951799245e-08, 'internalEnergy': 8708612.0, 
    'stepTime': 0.0700000524520874, 'totalEnergy': 632585.125, 
    'jobName': 'Job-1', 'artificialEnergy': 1948392.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 472419, 'distortionContrEnergy': 0.0, 
    'externalWork': 7503267.0, 'kineticEnergy': 215.271789550781, 
    'wallTime': 830.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0750000551342964, 
    'stableTimeIncrement': 8.36030764617135e-08, 'internalEnergy': 9564522.0, 
    'stepTime': 0.0750000551342964, 'totalEnergy': 682846.125, 
    'jobName': 'Job-1', 'artificialEnergy': 2225809.75, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 529625, 
    'distortionContrEnergy': 0.0, 'externalWork': 8271231.5, 
    'kineticEnergy': 197.255920410156, 'wallTime': 913.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.080000065267086, 
    'stableTimeIncrement': 7.53270725795119e-08, 'internalEnergy': 10523107.0, 
    'stepTime': 0.080000065267086, 'totalEnergy': 743515.125, 
    'jobName': 'Job-1', 'artificialEnergy': 2536826.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 591626, 
    'distortionContrEnergy': 0.0, 'externalWork': 9119902.0, 
    'kineticEnergy': 1570.22326660156, 'wallTime': 993.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0850000232458115, 
    'stableTimeIncrement': 7.0906224891587e-08, 'internalEnergy': 11355716.0, 
    'stepTime': 0.0850000232458115, 'totalEnergy': 794904.1875, 
    'jobName': 'Job-1', 'artificialEnergy': 2745747.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 658652, 'distortionContrEnergy': 0.0, 
    'externalWork': 9891403.0, 'kineticEnergy': 67.9515533447266, 
    'wallTime': 1079.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0900000035762787, 
    'stableTimeIncrement': 6.88761119249648e-08, 'internalEnergy': 12149540.0, 
    'stepTime': 0.0900000035762787, 'totalEnergy': 843310.1875, 
    'jobName': 'Job-1', 'artificialEnergy': 2970330.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 731966, 
    'distortionContrEnergy': 0.0, 'externalWork': 10681853.0, 
    'kineticEnergy': 32.5666618347168, 'wallTime': 1174.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0950000286102295, 
    'stableTimeIncrement': 6.03361129947189e-08, 'internalEnergy': 12834770.0, 
    'stepTime': 0.0950000286102295, 'totalEnergy': 881128.0625, 
    'jobName': 'Job-1', 'artificialEnergy': 3164108.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 807055, 'distortionContrEnergy': 0.0, 
    'externalWork': 11352670.0, 'kineticEnergy': 43.5889129638672, 
    'wallTime': 1270.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.100000001490116, 
    'stableTimeIncrement': 5.62314532714936e-08, 'internalEnergy': 13577315.0, 
    'stepTime': 0.100000001490116, 'totalEnergy': 927653.875, 
    'jobName': 'Job-1', 'artificialEnergy': 3328959.0, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 894607, 'distortionContrEnergy': 0.0, 
    'externalWork': 12040559.0, 'kineticEnergy': 104.230194091797, 
    'wallTime': 1381.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Aug  4 16:42:19 2025', 
    'jobName': 'Job-1'})
# Save by mmahd on 2025_08_04-16.45.35; build 2023 2022_09_28-21.41.55 183150
# Save by mmahd on 2025_08_04-16.48.51; build 2023 2022_09_28-21.41.55 183150
